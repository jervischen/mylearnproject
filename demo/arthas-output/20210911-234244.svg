<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1366" onload="init(evt)" viewBox="0 0 1200 1366" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1349"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1349"> </text>
<g id="frames">
<g>
<title>all (2,360 samples, 100.00%)</title><rect x="10.0" y="1315.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="1326.0">all</text>
</g>
<g>
<title>com/example/Test.main (2,180 samples, 92.37%)</title><rect x="10.0" y="1299.0" width="1090.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="13.0" y="1310.0">com/example/Test.main</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.04%)</title><rect x="11.5" y="1283.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="14.5" y="1294.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.04%)</title><rect x="11.5" y="1267.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="14.5" y="1278.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.04%)</title><rect x="11.5" y="1251.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="14.5" y="1262.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.04%)</title><rect x="11.5" y="1235.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="14.5" y="1246.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.04%)</title><rect x="11.5" y="1219.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="14.5" y="1230.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.04%)</title><rect x="11.5" y="1203.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="14.5" y="1214.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.04%)</title><rect x="12.0" y="1283.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="15.0" y="1294.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.04%)</title><rect x="12.0" y="1267.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="15.0" y="1278.0"></text>
</g>
<g>
<title>java/io/PrintStream.println (2,081 samples, 88.18%)</title><rect x="12.5" y="1283.0" width="1040.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="15.5" y="1294.0">java/io/PrintStream.println</text>
</g>
<g>
<title>java/io/PrintStream.newLine (1,084 samples, 45.93%)</title><rect x="15.0" y="1267.0" width="542.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.0" y="1278.0">java/io/PrintStream.newLine</text>
</g>
<g>
<title>java/io/BufferedOutputStream.flush (15 samples, 0.64%)</title><rect x="20.0" y="1251.0" width="7.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="23.0" y="1262.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (5 samples, 0.21%)</title><rect x="25.0" y="1235.0" width="2.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="28.0" y="1246.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.write (5 samples, 0.21%)</title><rect x="25.0" y="1219.0" width="2.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="28.0" y="1230.0"></text>
</g>
<g>
<title>java/io/BufferedWriter.flushBuffer (43 samples, 1.82%)</title><rect x="27.5" y="1251.0" width="21.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="30.5" y="1262.0">j..</text>
</g>
<g>
<title>ThreadSafepointState::handle_polling_page_exception() (1 samples, 0.04%)</title><rect x="34.5" y="1235.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="37.5" y="1246.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.04%)</title><rect x="34.5" y="1219.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="37.5" y="1230.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (1 samples, 0.04%)</title><rect x="34.5" y="1203.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="37.5" y="1214.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (1 samples, 0.04%)</title><rect x="34.5" y="1187.0" width="0.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="37.5" y="1198.0"></text>
</g>
<g>
<title>java/io/OutputStreamWriter.write (28 samples, 1.19%)</title><rect x="35.0" y="1235.0" width="14.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="38.0" y="1246.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.write (28 samples, 1.19%)</title><rect x="35.0" y="1219.0" width="14.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="38.0" y="1230.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.04%)</title><rect x="37.0" y="1203.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="40.0" y="1214.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.04%)</title><rect x="37.0" y="1187.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="40.0" y="1198.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(KlassHandle, int, Thread*) (1 samples, 0.04%)</title><rect x="37.0" y="1171.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="40.0" y="1182.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_noinit(KlassHandle, unsigned long, Thread*) (1 samples, 0.04%)</title><rect x="37.0" y="1155.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="40.0" y="1166.0"></text>
</g>
<g>
<title>ParallelScavengeHeap::mem_allocate(unsigned long, bool*) (1 samples, 0.04%)</title><rect x="37.0" y="1139.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="40.0" y="1150.0"></text>
</g>
<g>
<title>VMThread::execute(VM_Operation*) (1 samples, 0.04%)</title><rect x="37.0" y="1123.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="40.0" y="1134.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.04%)</title><rect x="37.0" y="1107.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="40.0" y="1118.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.04%)</title><rect x="37.0" y="1091.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="40.0" y="1102.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (1 samples, 0.04%)</title><rect x="37.0" y="1075.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="40.0" y="1086.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (1 samples, 0.04%)</title><rect x="37.0" y="1059.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="40.0" y="1070.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.implWrite (23 samples, 0.97%)</title><rect x="37.5" y="1203.0" width="11.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="40.5" y="1214.0"></text>
</g>
<g>
<title>java/nio/CharBuffer.wrap (1 samples, 0.04%)</title><rect x="37.5" y="1187.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="40.5" y="1198.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.04%)</title><rect x="37.5" y="1171.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="40.5" y="1182.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.04%)</title><rect x="37.5" y="1155.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="40.5" y="1166.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(KlassHandle, int, Thread*) (1 samples, 0.04%)</title><rect x="37.5" y="1139.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="40.5" y="1150.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_noinit(KlassHandle, unsigned long, Thread*) (1 samples, 0.04%)</title><rect x="37.5" y="1123.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="40.5" y="1134.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.04%)</title><rect x="37.5" y="1107.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="40.5" y="1118.0"></text>
</g>
<g>
<title>ParallelScavengeHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.04%)</title><rect x="37.5" y="1091.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="40.5" y="1102.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.encode (22 samples, 0.93%)</title><rect x="38.0" y="1187.0" width="11.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="41.0" y="1198.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encodeLoop (17 samples, 0.72%)</title><rect x="40.5" y="1171.0" width="8.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="43.5" y="1182.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encodeArrayLoop (11 samples, 0.47%)</title><rect x="43.5" y="1155.0" width="5.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="46.5" y="1166.0"></text>
</g>
<g>
<title>java/io/BufferedWriter.newLine (44 samples, 1.86%)</title><rect x="49.0" y="1251.0" width="22.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="52.0" y="1262.0">j..</text>
</g>
<g>
<title>java/io/Writer.write (44 samples, 1.86%)</title><rect x="49.0" y="1235.0" width="22.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="52.0" y="1246.0">j..</text>
</g>
<g>
<title>java/io/BufferedWriter.write (44 samples, 1.86%)</title><rect x="49.0" y="1219.0" width="22.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="52.0" y="1230.0">j..</text>
</g>
<g>
<title>java/io/PrintStream.write (3 samples, 0.13%)</title><rect x="66.5" y="1203.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="69.5" y="1214.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (6 samples, 0.25%)</title><rect x="68.0" y="1203.0" width="3.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="71.0" y="1214.0"></text>
</g>
<g>
<title>java/io/OutputStreamWriter.flushBuffer (972 samples, 41.19%)</title><rect x="71.0" y="1251.0" width="486.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="74.0" y="1262.0">java/io/OutputStreamWriter.flushBuffer</text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.flushBuffer (969 samples, 41.06%)</title><rect x="72.5" y="1235.0" width="484.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="75.5" y="1246.0">sun/nio/cs/StreamEncoder.flushBuffer</text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.implFlushBuffer (965 samples, 40.89%)</title><rect x="74.5" y="1219.0" width="482.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="77.5" y="1230.0">sun/nio/cs/StreamEncoder.implFlushBuffer</text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.writeBytes (965 samples, 40.89%)</title><rect x="74.5" y="1203.0" width="482.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="77.5" y="1214.0">sun/nio/cs/StreamEncoder.writeBytes</text>
</g>
<g>
<title>java/io/PrintStream.write (965 samples, 40.89%)</title><rect x="74.5" y="1187.0" width="482.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="77.5" y="1198.0">java/io/PrintStream.write</text>
</g>
<g>
<title>java/io/BufferedOutputStream.flush (937 samples, 39.70%)</title><rect x="86.5" y="1171.0" width="468.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="89.5" y="1182.0">java/io/BufferedOutputStream.flush</text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (919 samples, 38.94%)</title><rect x="95.0" y="1155.0" width="459.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="98.0" y="1166.0">java/io/BufferedOutputStream.flushBuffer</text>
</g>
<g>
<title>java/io/FileOutputStream.write (919 samples, 38.94%)</title><rect x="95.0" y="1139.0" width="459.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="98.0" y="1150.0">java/io/FileOutputStream.write</text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (902 samples, 38.22%)</title><rect x="101.0" y="1123.0" width="451.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="104.0" y="1134.0">java/io/FileOutputStream.writeBytes</text>
</g>
<g>
<title>JavaThread::check_special_condition_for_native_trans(JavaThread*) (1 samples, 0.04%)</title><rect x="126.5" y="1107.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="129.5" y="1118.0"></text>
</g>
<g>
<title>JavaThread::check_safepoint_and_suspend_for_native_trans(JavaThread*) (1 samples, 0.04%)</title><rect x="126.5" y="1091.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="129.5" y="1102.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.04%)</title><rect x="126.5" y="1075.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="129.5" y="1086.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.04%)</title><rect x="126.5" y="1059.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="129.5" y="1070.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.04%)</title><rect x="126.5" y="1043.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="129.5" y="1054.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (1 samples, 0.04%)</title><rect x="126.5" y="1027.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="129.5" y="1038.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.04%)</title><rect x="126.5" y="1011.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="129.5" y="1022.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.04%)</title><rect x="126.5" y="995.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="129.5" y="1006.0"></text>
</g>
<g>
<title>Java_java_io_FileOutputStream_writeBytes (849 samples, 35.97%)</title><rect x="127.0" y="1107.0" width="424.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="130.0" y="1118.0">Java_java_io_FileOutputStream_writeBytes</text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.04%)</title><rect x="128.5" y="1091.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="131.5" y="1102.0"></text>
</g>
<g>
<title>jni_GetObjectField (3 samples, 0.13%)</title><rect x="129.0" y="1091.0" width="1.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="132.0" y="1102.0"></text>
</g>
<g>
<title>writeBytes (842 samples, 35.68%)</title><rect x="130.5" y="1091.0" width="421.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="133.5" y="1102.0">writeBytes</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.13%)</title><rect x="139.5" y="1075.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="142.5" y="1086.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (2 samples, 0.08%)</title><rect x="141.0" y="1075.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="144.0" y="1086.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (3 samples, 0.13%)</title><rect x="142.0" y="1075.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="145.0" y="1086.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.04%)</title><rect x="143.5" y="1075.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="146.5" y="1086.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.04%)</title><rect x="144.0" y="1075.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="147.0" y="1086.0"></text>
</g>
<g>
<title>handleWrite (8 samples, 0.34%)</title><rect x="144.5" y="1075.0" width="4.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="147.5" y="1086.0"></text>
</g>
<g>
<title>jni_ExceptionOccurred (26 samples, 1.10%)</title><rect x="148.5" y="1075.0" width="13.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="151.5" y="1086.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.04%)</title><rect x="148.5" y="1059.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="151.5" y="1070.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (13 samples, 0.55%)</title><rect x="149.0" y="1059.0" width="6.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="152.0" y="1070.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (2 samples, 0.08%)</title><rect x="154.5" y="1043.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="157.5" y="1054.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.04%)</title><rect x="154.5" y="1027.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="157.5" y="1038.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.04%)</title><rect x="154.5" y="1011.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="157.5" y="1022.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (1 samples, 0.04%)</title><rect x="154.5" y="995.0" width="0.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="157.5" y="1006.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.04%)</title><rect x="154.5" y="979.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="157.5" y="990.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.04%)</title><rect x="154.5" y="963.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="157.5" y="974.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (1 samples, 0.04%)</title><rect x="155.0" y="1027.0" width="0.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="158.0" y="1038.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (1 samples, 0.04%)</title><rect x="155.0" y="1011.0" width="0.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="158.0" y="1022.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (12 samples, 0.51%)</title><rect x="155.5" y="1059.0" width="6.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="158.5" y="1070.0"></text>
</g>
<g>
<title>jni_GetArrayLength (16 samples, 0.68%)</title><rect x="161.5" y="1075.0" width="8.0" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="164.5" y="1086.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (6 samples, 0.25%)</title><rect x="162.0" y="1059.0" width="3.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="165.0" y="1070.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (9 samples, 0.38%)</title><rect x="165.0" y="1059.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="168.0" y="1070.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (30 samples, 1.27%)</title><rect x="169.5" y="1075.0" width="15.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="172.5" y="1086.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.13%)</title><rect x="175.0" y="1059.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="178.0" y="1070.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (11 samples, 0.47%)</title><rect x="176.5" y="1059.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="179.5" y="1070.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.13%)</title><rect x="182.0" y="1059.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="185.0" y="1070.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.08%)</title><rect x="183.5" y="1059.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="186.5" y="1070.0"></text>
</g>
<g>
<title>jni_GetObjectField (62 samples, 2.63%)</title><rect x="184.5" y="1075.0" width="31.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="187.5" y="1086.0">jn..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (6 samples, 0.25%)</title><rect x="191.5" y="1059.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="194.5" y="1070.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (9 samples, 0.38%)</title><rect x="194.5" y="1059.0" width="4.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="197.5" y="1070.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (2 samples, 0.08%)</title><rect x="199.0" y="1059.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="202.0" y="1070.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.04%)</title><rect x="199.5" y="1043.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="202.5" y="1054.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.04%)</title><rect x="200.0" y="1059.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="203.0" y="1070.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (13 samples, 0.55%)</title><rect x="200.5" y="1059.0" width="6.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="203.5" y="1070.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (17 samples, 0.72%)</title><rect x="207.0" y="1059.0" width="8.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="210.0" y="1070.0"></text>
</g>
<g>
<title>write (672 samples, 28.47%)</title><rect x="215.5" y="1075.0" width="336.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="218.5" y="1086.0">write</text>
</g>
<g>
<title>writeBytes (1 samples, 0.04%)</title><rect x="551.5" y="1107.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="554.5" y="1118.0"></text>
</g>
<g>
<title>jbyte_arraycopy (2 samples, 0.08%)</title><rect x="552.0" y="1123.0" width="1.0" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="555.0" y="1134.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.13%)</title><rect x="553.0" y="1123.0" width="1.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="556.0" y="1134.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (1 samples, 0.04%)</title><rect x="554.5" y="1155.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="557.5" y="1166.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.write (4 samples, 0.17%)</title><rect x="555.0" y="1171.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="558.0" y="1182.0"></text>
</g>
<g>
<title>java/io/PrintStream.print (992 samples, 42.03%)</title><rect x="557.0" y="1267.0" width="496.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="560.0" y="1278.0">java/io/PrintStream.print</text>
</g>
<g>
<title>java/io/PrintStream.write (990 samples, 41.95%)</title><rect x="557.0" y="1251.0" width="495.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="560.0" y="1262.0">java/io/PrintStream.write</text>
</g>
<g>
<title>java/io/BufferedWriter.flushBuffer (44 samples, 1.86%)</title><rect x="563.0" y="1235.0" width="22.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="566.0" y="1246.0">j..</text>
</g>
<g>
<title>java/io/OutputStreamWriter.write (30 samples, 1.27%)</title><rect x="570.0" y="1219.0" width="15.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="573.0" y="1230.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.write (30 samples, 1.27%)</title><rect x="570.0" y="1203.0" width="15.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="573.0" y="1214.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.implWrite (22 samples, 0.93%)</title><rect x="574.0" y="1187.0" width="11.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="577.0" y="1198.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.encode (22 samples, 0.93%)</title><rect x="574.0" y="1171.0" width="11.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="577.0" y="1182.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encodeArrayLoop (1 samples, 0.04%)</title><rect x="574.5" y="1155.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="577.5" y="1166.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encodeLoop (20 samples, 0.85%)</title><rect x="575.0" y="1155.0" width="10.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="578.0" y="1166.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encodeArrayLoop (15 samples, 0.64%)</title><rect x="577.5" y="1139.0" width="7.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="580.5" y="1150.0"></text>
</g>
<g>
<title>java/io/OutputStreamWriter.flushBuffer (906 samples, 38.39%)</title><rect x="585.0" y="1235.0" width="453.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="588.0" y="1246.0">java/io/OutputStreamWriter.flushBuffer</text>
</g>
<g>
<title>java/io/OutputStreamWriter.write (2 samples, 0.08%)</title><rect x="587.5" y="1219.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="590.5" y="1230.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.flushBuffer (899 samples, 38.09%)</title><rect x="588.5" y="1219.0" width="449.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="591.5" y="1230.0">sun/nio/cs/StreamEncoder.flushBuffer</text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.implFlushBuffer (895 samples, 37.92%)</title><rect x="590.5" y="1203.0" width="447.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="593.5" y="1214.0">sun/nio/cs/StreamEncoder.implFlushBuffer</text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.writeBytes (895 samples, 37.92%)</title><rect x="590.5" y="1187.0" width="447.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="593.5" y="1198.0">sun/nio/cs/StreamEncoder.writeBytes</text>
</g>
<g>
<title>java/io/PrintStream.write (895 samples, 37.92%)</title><rect x="590.5" y="1171.0" width="447.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="593.5" y="1182.0">java/io/PrintStream.write</text>
</g>
<g>
<title>java/io/BufferedOutputStream.flush (859 samples, 36.40%)</title><rect x="603.5" y="1155.0" width="429.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="606.5" y="1166.0">java/io/BufferedOutputStream.flush</text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (843 samples, 35.72%)</title><rect x="611.0" y="1139.0" width="421.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="614.0" y="1150.0">java/io/BufferedOutputStream.flushBuffer</text>
</g>
<g>
<title>java/io/FileOutputStream.write (843 samples, 35.72%)</title><rect x="611.0" y="1123.0" width="421.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="614.0" y="1134.0">java/io/FileOutputStream.write</text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (825 samples, 34.96%)</title><rect x="617.0" y="1107.0" width="412.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="620.0" y="1118.0">java/io/FileOutputStream.writeBytes</text>
</g>
<g>
<title>JavaThread::check_special_condition_for_native_trans(JavaThread*) (1 samples, 0.04%)</title><rect x="634.0" y="1091.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="637.0" y="1102.0"></text>
</g>
<g>
<title>JavaThread::check_safepoint_and_suspend_for_native_trans(JavaThread*) (1 samples, 0.04%)</title><rect x="634.0" y="1075.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="637.0" y="1086.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.04%)</title><rect x="634.0" y="1059.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="637.0" y="1070.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.04%)</title><rect x="634.0" y="1043.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="637.0" y="1054.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.04%)</title><rect x="634.0" y="1027.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="637.0" y="1038.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (1 samples, 0.04%)</title><rect x="634.0" y="1011.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="637.0" y="1022.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.04%)</title><rect x="634.0" y="995.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="637.0" y="1006.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.04%)</title><rect x="634.0" y="979.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="637.0" y="990.0"></text>
</g>
<g>
<title>Java_java_io_FileOutputStream_writeBytes (790 samples, 33.47%)</title><rect x="634.5" y="1091.0" width="395.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="637.5" y="1102.0">Java_java_io_FileOutputStream_writeBytes</text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.04%)</title><rect x="637.5" y="1075.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="640.5" y="1086.0"></text>
</g>
<g>
<title>jni_GetObjectField (5 samples, 0.21%)</title><rect x="638.0" y="1075.0" width="2.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="641.0" y="1086.0"></text>
</g>
<g>
<title>writeBytes (778 samples, 32.97%)</title><rect x="640.5" y="1075.0" width="389.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="643.5" y="1086.0">writeBytes</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.13%)</title><rect x="649.0" y="1059.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="652.0" y="1070.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (1 samples, 0.04%)</title><rect x="650.5" y="1059.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="653.5" y="1070.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.04%)</title><rect x="651.0" y="1059.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="654.0" y="1070.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.04%)</title><rect x="651.5" y="1059.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="654.5" y="1070.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.04%)</title><rect x="652.0" y="1059.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="655.0" y="1070.0"></text>
</g>
<g>
<title>handleWrite (10 samples, 0.42%)</title><rect x="652.5" y="1059.0" width="5.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="655.5" y="1070.0"></text>
</g>
<g>
<title>jni_ExceptionOccurred (13 samples, 0.55%)</title><rect x="657.5" y="1059.0" width="6.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="660.5" y="1070.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.04%)</title><rect x="658.0" y="1043.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="661.0" y="1054.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (2 samples, 0.08%)</title><rect x="658.5" y="1043.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="661.5" y="1054.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (6 samples, 0.25%)</title><rect x="659.5" y="1043.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="662.5" y="1054.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.13%)</title><rect x="662.5" y="1043.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="665.5" y="1054.0"></text>
</g>
<g>
<title>jni_GetArrayLength (19 samples, 0.81%)</title><rect x="664.0" y="1059.0" width="9.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="667.0" y="1070.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (9 samples, 0.38%)</title><rect x="665.0" y="1043.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="668.0" y="1054.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (8 samples, 0.34%)</title><rect x="669.5" y="1043.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="672.5" y="1054.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (34 samples, 1.44%)</title><rect x="673.5" y="1059.0" width="17.0" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="676.5" y="1070.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.13%)</title><rect x="678.0" y="1043.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="681.0" y="1054.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (12 samples, 0.51%)</title><rect x="679.5" y="1043.0" width="6.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="682.5" y="1054.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (10 samples, 0.42%)</title><rect x="685.5" y="1043.0" width="5.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="688.5" y="1054.0"></text>
</g>
<g>
<title>jni_GetObjectField (68 samples, 2.88%)</title><rect x="690.5" y="1059.0" width="34.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="693.5" y="1070.0">jn..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (9 samples, 0.38%)</title><rect x="697.5" y="1043.0" width="4.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="700.5" y="1054.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (7 samples, 0.30%)</title><rect x="702.0" y="1043.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="705.0" y="1054.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (1 samples, 0.04%)</title><rect x="705.5" y="1043.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="708.5" y="1054.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (15 samples, 0.64%)</title><rect x="706.0" y="1043.0" width="7.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="709.0" y="1054.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (22 samples, 0.93%)</title><rect x="713.5" y="1043.0" width="11.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="716.5" y="1054.0"></text>
</g>
<g>
<title>write (610 samples, 25.85%)</title><rect x="724.5" y="1059.0" width="305.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="727.5" y="1070.0">write</text>
</g>
<g>
<title>jbyte_arraycopy (2 samples, 0.08%)</title><rect x="1029.5" y="1107.0" width="1.0" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1032.5" y="1118.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.17%)</title><rect x="1030.5" y="1107.0" width="2.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1033.5" y="1118.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (1 samples, 0.04%)</title><rect x="1032.5" y="1139.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1035.5" y="1150.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.write (10 samples, 0.42%)</title><rect x="1033.0" y="1155.0" width="5.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1036.0" y="1166.0"></text>
</g>
<g>
<title>java/io/Writer.write (23 samples, 0.97%)</title><rect x="1038.0" y="1235.0" width="11.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1041.0" y="1246.0"></text>
</g>
<g>
<title>java/io/BufferedWriter.write (23 samples, 0.97%)</title><rect x="1038.0" y="1219.0" width="11.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1041.0" y="1230.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.04%)</title><rect x="1046.5" y="1203.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1049.5" y="1214.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.21%)</title><rect x="1047.0" y="1203.0" width="2.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1050.0" y="1214.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.08%)</title><rect x="1049.5" y="1235.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1052.5" y="1246.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.08%)</title><rect x="1049.5" y="1219.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1052.5" y="1230.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.flushBuffer (3 samples, 0.13%)</title><rect x="1050.5" y="1235.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1053.5" y="1246.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.flushBuffer (2 samples, 0.08%)</title><rect x="1052.0" y="1251.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1055.0" y="1262.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.implFlushBuffer (2 samples, 0.08%)</title><rect x="1052.0" y="1235.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1055.0" y="1246.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.writeBytes (2 samples, 0.08%)</title><rect x="1052.0" y="1219.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1055.0" y="1230.0"></text>
</g>
<g>
<title>java/io/PrintStream.write (2 samples, 0.08%)</title><rect x="1052.0" y="1203.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1055.0" y="1214.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flush (2 samples, 0.08%)</title><rect x="1052.0" y="1187.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1055.0" y="1198.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (2 samples, 0.08%)</title><rect x="1052.0" y="1171.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1055.0" y="1182.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.write (2 samples, 0.08%)</title><rect x="1052.0" y="1155.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1055.0" y="1166.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encodeArrayLoop (2 samples, 0.08%)</title><rect x="1052.0" y="1139.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1055.0" y="1150.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (78 samples, 3.31%)</title><rect x="1053.0" y="1283.0" width="39.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1056.0" y="1294.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (19 samples, 0.81%)</title><rect x="1070.0" y="1267.0" width="9.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1073.0" y="1278.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (19 samples, 0.81%)</title><rect x="1070.0" y="1251.0" width="9.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1073.0" y="1262.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (19 samples, 0.81%)</title><rect x="1070.0" y="1235.0" width="9.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1073.0" y="1246.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.13%)</title><rect x="1079.5" y="1267.0" width="1.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1082.5" y="1278.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (22 samples, 0.93%)</title><rect x="1081.0" y="1267.0" width="11.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1084.0" y="1278.0"></text>
</g>
<g>
<title>_res (9 samples, 0.38%)</title><rect x="1087.5" y="1251.0" width="4.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1090.5" y="1262.0"></text>
</g>
<g>
<title>java/util/Random.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1092.0" y="1283.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1095.0" y="1294.0"></text>
</g>
<g>
<title>java/util/Random.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1092.0" y="1267.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1095.0" y="1278.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.04%)</title><rect x="1092.0" y="1251.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1095.0" y="1262.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.04%)</title><rect x="1092.0" y="1235.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1095.0" y="1246.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(KlassHandle, int, Thread*) (1 samples, 0.04%)</title><rect x="1092.0" y="1219.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1095.0" y="1230.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_noinit(KlassHandle, unsigned long, Thread*) (1 samples, 0.04%)</title><rect x="1092.0" y="1203.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1095.0" y="1214.0"></text>
</g>
<g>
<title>ParallelScavengeHeap::mem_allocate(unsigned long, bool*) (1 samples, 0.04%)</title><rect x="1092.0" y="1187.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1095.0" y="1198.0"></text>
</g>
<g>
<title>VMThread::execute(VM_Operation*) (1 samples, 0.04%)</title><rect x="1092.0" y="1171.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1095.0" y="1182.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.04%)</title><rect x="1092.0" y="1155.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1095.0" y="1166.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.04%)</title><rect x="1092.0" y="1139.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1095.0" y="1150.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.04%)</title><rect x="1092.0" y="1123.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1095.0" y="1134.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (1 samples, 0.04%)</title><rect x="1092.0" y="1107.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1095.0" y="1118.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.04%)</title><rect x="1092.0" y="1091.0" width="0.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1095.0" y="1102.0"></text>
</g>
<g>
<title>java/util/Random.nextInt (12 samples, 0.51%)</title><rect x="1092.5" y="1283.0" width="6.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1095.5" y="1294.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.08%)</title><rect x="1097.5" y="1267.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1100.5" y="1278.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.13%)</title><rect x="1098.5" y="1283.0" width="1.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1101.5" y="1294.0"></text>
</g>
<g>
<title>java/lang/Thread.run (31 samples, 1.31%)</title><rect x="1100.0" y="1299.0" width="15.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1103.0" y="1310.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/util/concurrent/FastThreadLocalRunnable.run (29 samples, 1.23%)</title><rect x="1100.0" y="1283.0" width="14.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1103.0" y="1294.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/util/internal/ThreadExecutorMap$2.run (29 samples, 1.23%)</title><rect x="1100.0" y="1267.0" width="14.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1103.0" y="1278.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/util/concurrent/SingleThreadEventExecutor$4.run (29 samples, 1.23%)</title><rect x="1100.0" y="1251.0" width="14.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1103.0" y="1262.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/nio/NioEventLoop.run (29 samples, 1.23%)</title><rect x="1100.0" y="1235.0" width="14.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1103.0" y="1246.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/nio/NioEventLoop.processSelectedKeys (20 samples, 0.85%)</title><rect x="1100.0" y="1219.0" width="10.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1103.0" y="1230.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/nio/NioEventLoop.processSelectedKeysOptimized (20 samples, 0.85%)</title><rect x="1100.0" y="1203.0" width="10.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1103.0" y="1214.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/nio/NioEventLoop.processSelectedKey (20 samples, 0.85%)</title><rect x="1100.0" y="1187.0" width="10.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1103.0" y="1198.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe.read (19 samples, 0.81%)</title><rect x="1100.0" y="1171.0" width="9.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1103.0" y="1182.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/DefaultChannelPipeline.fireChannelRead (17 samples, 0.72%)</title><rect x="1100.0" y="1155.0" width="8.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1103.0" y="1166.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (17 samples, 0.72%)</title><rect x="1100.0" y="1139.0" width="8.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1103.0" y="1150.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (17 samples, 0.72%)</title><rect x="1100.0" y="1123.0" width="8.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1103.0" y="1134.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/DefaultChannelPipeline$HeadContext.channelRead (17 samples, 0.72%)</title><rect x="1100.0" y="1107.0" width="8.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1103.0" y="1118.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.fireChannelRead (17 samples, 0.72%)</title><rect x="1100.0" y="1091.0" width="8.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1103.0" y="1102.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (17 samples, 0.72%)</title><rect x="1100.0" y="1075.0" width="8.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1103.0" y="1086.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (17 samples, 0.72%)</title><rect x="1100.0" y="1059.0" width="8.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1103.0" y="1070.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/term/impl/httptelnet/ProtocolDetectHandler.channelRead (5 samples, 0.21%)</title><rect x="1100.0" y="1043.0" width="2.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1103.0" y="1054.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.04%)</title><rect x="1100.0" y="1027.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1103.0" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::initialize(Thread*) (1 samples, 0.04%)</title><rect x="1100.0" y="1011.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1103.0" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(instanceKlassHandle, Thread*) (1 samples, 0.04%)</title><rect x="1100.0" y="995.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1103.0" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::link_class(Thread*) (1 samples, 0.04%)</title><rect x="1100.0" y="979.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1103.0" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(instanceKlassHandle, bool, Thread*) (1 samples, 0.04%)</title><rect x="1100.0" y="963.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1103.0" y="974.0"></text>
</g>
<g>
<title>Verifier::verify(instanceKlassHandle, Verifier::Mode, bool, Thread*) (1 samples, 0.04%)</title><rect x="1100.0" y="947.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1103.0" y="958.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.04%)</title><rect x="1100.0" y="931.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1103.0" y="942.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle, Thread*) (1 samples, 0.04%)</title><rect x="1100.0" y="915.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1103.0" y="926.0"></text>
</g>
<g>
<title>ClassVerifier::verify_invoke_instructions(RawBytecodeStream*, unsigned int, StackMapFrame*, bool, bool*, VerificationType, constantPoolHandle, StackMapTable*, Thread*) (1 samples, 0.04%)</title><rect x="1100.0" y="899.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1103.0" y="910.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.04%)</title><rect x="1100.0" y="883.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1103.0" y="894.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.04%)</title><rect x="1100.0" y="867.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1103.0" y="878.0"></text>
</g>
<g>
<title>SymbolTable::hash_symbol(char const*, int) (1 samples, 0.04%)</title><rect x="1100.0" y="851.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1103.0" y="862.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.fireChannelRead (1 samples, 0.04%)</title><rect x="1100.5" y="1027.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1103.5" y="1038.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (1 samples, 0.04%)</title><rect x="1100.5" y="1011.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1103.5" y="1022.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (1 samples, 0.04%)</title><rect x="1100.5" y="995.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1103.5" y="1006.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/CombinedChannelDuplexHandler.channelRead (1 samples, 0.04%)</title><rect x="1100.5" y="979.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1103.5" y="990.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/handler/codec/ByteToMessageDecoder.channelRead (1 samples, 0.04%)</title><rect x="1100.5" y="963.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1103.5" y="974.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/handler/codec/CodecOutputList.newInstance (1 samples, 0.04%)</title><rect x="1100.5" y="947.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1103.5" y="958.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/util/concurrent/FastThreadLocal.get (1 samples, 0.04%)</title><rect x="1100.5" y="931.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1103.5" y="942.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/util/concurrent/FastThreadLocal.initialize (1 samples, 0.04%)</title><rect x="1100.5" y="915.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1103.5" y="926.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/handler/codec/CodecOutputList$2.initialValue (1 samples, 0.04%)</title><rect x="1100.5" y="899.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1103.5" y="910.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/handler/codec/CodecOutputList$2.initialValue (1 samples, 0.04%)</title><rect x="1100.5" y="883.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1103.5" y="894.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.04%)</title><rect x="1100.5" y="867.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1103.5" y="878.0"></text>
</g>
<g>
<title>com/taobao/arthas/agent/ArthasClassloader.loadClass (1 samples, 0.04%)</title><rect x="1100.5" y="851.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1103.5" y="862.0"></text>
</g>
<g>
<title>java/net/URLClassLoader.findClass (1 samples, 0.04%)</title><rect x="1100.5" y="835.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1103.5" y="846.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (1 samples, 0.04%)</title><rect x="1100.5" y="819.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1103.5" y="830.0"></text>
</g>
<g>
<title>java/net/URLClassLoader$1.run (1 samples, 0.04%)</title><rect x="1100.5" y="803.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1103.5" y="814.0"></text>
</g>
<g>
<title>java/net/URLClassLoader$1.run (1 samples, 0.04%)</title><rect x="1100.5" y="787.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1103.5" y="798.0"></text>
</g>
<g>
<title>java/net/URLClassLoader.access$100 (1 samples, 0.04%)</title><rect x="1100.5" y="771.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1103.5" y="782.0"></text>
</g>
<g>
<title>java/net/URLClassLoader.defineClass (1 samples, 0.04%)</title><rect x="1100.5" y="755.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1103.5" y="766.0"></text>
</g>
<g>
<title>sun/misc/Resource.getBytes (1 samples, 0.04%)</title><rect x="1100.5" y="739.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1103.5" y="750.0"></text>
</g>
<g>
<title>java/util/zip/InflaterInputStream.read (1 samples, 0.04%)</title><rect x="1100.5" y="723.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1103.5" y="734.0"></text>
</g>
<g>
<title>java/util/zip/Inflater.inflate (1 samples, 0.04%)</title><rect x="1100.5" y="707.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1103.5" y="718.0"></text>
</g>
<g>
<title>java/util/zip/Inflater.inflateBytes (1 samples, 0.04%)</title><rect x="1100.5" y="691.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1103.5" y="702.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytes (1 samples, 0.04%)</title><rect x="1100.5" y="675.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1103.5" y="686.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.04%)</title><rect x="1100.5" y="659.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1103.5" y="670.0"></text>
</g>
<g>
<title>inflateCodesUsed (1 samples, 0.04%)</title><rect x="1100.5" y="643.0" width="0.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1103.5" y="654.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/handler/codec/http/HttpObjectAggregator.&lt;clinit&gt; (1 samples, 0.04%)</title><rect x="1101.0" y="1027.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1104.0" y="1038.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/handler/codec/http/DefaultFullHttpResponse.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1101.0" y="1011.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1104.0" y="1022.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/handler/codec/http/DefaultFullHttpResponse.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1101.0" y="995.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1104.0" y="1006.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/handler/codec/http/DefaultFullHttpResponse.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1101.0" y="979.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1104.0" y="990.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/handler/codec/http/DefaultHttpResponse.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1101.0" y="963.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1104.0" y="974.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/handler/codec/http/DefaultHttpMessage.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1101.0" y="947.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1104.0" y="958.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.04%)</title><rect x="1101.0" y="931.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1104.0" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::initialize(Thread*) (1 samples, 0.04%)</title><rect x="1101.0" y="915.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1104.0" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(instanceKlassHandle, Thread*) (1 samples, 0.04%)</title><rect x="1101.0" y="899.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1104.0" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::link_class(Thread*) (1 samples, 0.04%)</title><rect x="1101.0" y="883.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1104.0" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(instanceKlassHandle, bool, Thread*) (1 samples, 0.04%)</title><rect x="1101.0" y="867.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1104.0" y="878.0"></text>
</g>
<g>
<title>Verifier::verify(instanceKlassHandle, Verifier::Mode, bool, Thread*) (1 samples, 0.04%)</title><rect x="1101.0" y="851.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1104.0" y="862.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.04%)</title><rect x="1101.0" y="835.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1104.0" y="846.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle, Thread*) (1 samples, 0.04%)</title><rect x="1101.0" y="819.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1104.0" y="830.0"></text>
</g>
<g>
<title>StackMapFrame::set_locals_from_arg(methodHandle, VerificationType, Thread*) (1 samples, 0.04%)</title><rect x="1101.0" y="803.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1104.0" y="814.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.04%)</title><rect x="1101.0" y="787.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1104.0" y="798.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.04%)</title><rect x="1101.0" y="771.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1104.0" y="782.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.04%)</title><rect x="1101.0" y="755.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1104.0" y="766.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/handler/codec/http/HttpServerCodec.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1101.5" y="1027.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1104.5" y="1038.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/handler/codec/http/HttpServerCodec.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1101.5" y="1011.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1104.5" y="1022.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.04%)</title><rect x="1101.5" y="995.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1104.5" y="1006.0"></text>
</g>
<g>
<title>com/taobao/arthas/agent/ArthasClassloader.loadClass (1 samples, 0.04%)</title><rect x="1101.5" y="979.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1104.5" y="990.0"></text>
</g>
<g>
<title>java/net/URLClassLoader.findClass (1 samples, 0.04%)</title><rect x="1101.5" y="963.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1104.5" y="974.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (1 samples, 0.04%)</title><rect x="1101.5" y="947.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1104.5" y="958.0"></text>
</g>
<g>
<title>java/net/URLClassLoader$1.run (1 samples, 0.04%)</title><rect x="1101.5" y="931.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1104.5" y="942.0"></text>
</g>
<g>
<title>java/net/URLClassLoader$1.run (1 samples, 0.04%)</title><rect x="1101.5" y="915.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1104.5" y="926.0"></text>
</g>
<g>
<title>java/net/URLClassLoader.access$100 (1 samples, 0.04%)</title><rect x="1101.5" y="899.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1104.5" y="910.0"></text>
</g>
<g>
<title>java/net/URLClassLoader.defineClass (1 samples, 0.04%)</title><rect x="1101.5" y="883.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1104.5" y="894.0"></text>
</g>
<g>
<title>java/security/SecureClassLoader.defineClass (1 samples, 0.04%)</title><rect x="1101.5" y="867.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1104.5" y="878.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass (1 samples, 0.04%)</title><rect x="1101.5" y="851.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1104.5" y="862.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass1 (1 samples, 0.04%)</title><rect x="1101.5" y="835.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1104.5" y="846.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.04%)</title><rect x="1101.5" y="819.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1104.5" y="830.0"></text>
</g>
<g>
<title>com/taobao/arthas/agent/ArthasClassloader.loadClass (1 samples, 0.04%)</title><rect x="1101.5" y="803.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1104.5" y="814.0"></text>
</g>
<g>
<title>java/net/URLClassLoader.findClass (1 samples, 0.04%)</title><rect x="1101.5" y="787.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1104.5" y="798.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (1 samples, 0.04%)</title><rect x="1101.5" y="771.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1104.5" y="782.0"></text>
</g>
<g>
<title>java/net/URLClassLoader$1.run (1 samples, 0.04%)</title><rect x="1101.5" y="755.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1104.5" y="766.0"></text>
</g>
<g>
<title>java/net/URLClassLoader$1.run (1 samples, 0.04%)</title><rect x="1101.5" y="739.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1104.5" y="750.0"></text>
</g>
<g>
<title>java/net/URLClassLoader.access$100 (1 samples, 0.04%)</title><rect x="1101.5" y="723.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1104.5" y="734.0"></text>
</g>
<g>
<title>java/net/URLClassLoader.defineClass (1 samples, 0.04%)</title><rect x="1101.5" y="707.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1104.5" y="718.0"></text>
</g>
<g>
<title>java/security/SecureClassLoader.defineClass (1 samples, 0.04%)</title><rect x="1101.5" y="691.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1104.5" y="702.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass (1 samples, 0.04%)</title><rect x="1101.5" y="675.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1104.5" y="686.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass1 (1 samples, 0.04%)</title><rect x="1101.5" y="659.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1104.5" y="670.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.04%)</title><rect x="1101.5" y="643.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1104.5" y="654.0"></text>
</g>
<g>
<title>com/taobao/arthas/agent/ArthasClassloader.loadClass (1 samples, 0.04%)</title><rect x="1101.5" y="627.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1104.5" y="638.0"></text>
</g>
<g>
<title>java/net/URLClassLoader.findClass (1 samples, 0.04%)</title><rect x="1101.5" y="611.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1104.5" y="622.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (1 samples, 0.04%)</title><rect x="1101.5" y="595.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1104.5" y="606.0"></text>
</g>
<g>
<title>java/net/URLClassLoader$1.run (1 samples, 0.04%)</title><rect x="1101.5" y="579.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1104.5" y="590.0"></text>
</g>
<g>
<title>java/net/URLClassLoader$1.run (1 samples, 0.04%)</title><rect x="1101.5" y="563.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1104.5" y="574.0"></text>
</g>
<g>
<title>java/net/URLClassLoader.access$100 (1 samples, 0.04%)</title><rect x="1101.5" y="547.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1104.5" y="558.0"></text>
</g>
<g>
<title>java/net/URLClassLoader.defineClass (1 samples, 0.04%)</title><rect x="1101.5" y="531.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1104.5" y="542.0"></text>
</g>
<g>
<title>java/security/SecureClassLoader.defineClass (1 samples, 0.04%)</title><rect x="1101.5" y="515.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1104.5" y="526.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass (1 samples, 0.04%)</title><rect x="1101.5" y="499.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1104.5" y="510.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass1 (1 samples, 0.04%)</title><rect x="1101.5" y="483.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1104.5" y="494.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.04%)</title><rect x="1101.5" y="467.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1104.5" y="478.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.04%)</title><rect x="1101.5" y="451.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1104.5" y="462.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, unsigned char, Thread*) (1 samples, 0.04%)</title><rect x="1101.5" y="435.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1104.5" y="446.0"></text>
</g>
<g>
<title>SymbolTable::lookup(char const*, int, Thread*) (1 samples, 0.04%)</title><rect x="1101.5" y="419.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1104.5" y="430.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.04%)</title><rect x="1101.5" y="403.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1104.5" y="414.0"></text>
</g>
<g>
<title>Symbol::equals(char const*, int) const (1 samples, 0.04%)</title><rect x="1101.5" y="387.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1104.5" y="398.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.04%)</title><rect x="1102.0" y="1027.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1105.0" y="1038.0"></text>
</g>
<g>
<title>com/taobao/arthas/agent/ArthasClassloader.loadClass (1 samples, 0.04%)</title><rect x="1102.0" y="1011.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1105.0" y="1022.0"></text>
</g>
<g>
<title>java/net/URLClassLoader.findClass (1 samples, 0.04%)</title><rect x="1102.0" y="995.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1105.0" y="1006.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (1 samples, 0.04%)</title><rect x="1102.0" y="979.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1105.0" y="990.0"></text>
</g>
<g>
<title>java/net/URLClassLoader$1.run (1 samples, 0.04%)</title><rect x="1102.0" y="963.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1105.0" y="974.0"></text>
</g>
<g>
<title>java/net/URLClassLoader$1.run (1 samples, 0.04%)</title><rect x="1102.0" y="947.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1105.0" y="958.0"></text>
</g>
<g>
<title>java/net/URLClassLoader.access$100 (1 samples, 0.04%)</title><rect x="1102.0" y="931.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1105.0" y="942.0"></text>
</g>
<g>
<title>java/net/URLClassLoader.defineClass (1 samples, 0.04%)</title><rect x="1102.0" y="915.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1105.0" y="926.0"></text>
</g>
<g>
<title>sun/misc/Resource.getBytes (1 samples, 0.04%)</title><rect x="1102.0" y="899.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1105.0" y="910.0"></text>
</g>
<g>
<title>java/util/zip/InflaterInputStream.read (1 samples, 0.04%)</title><rect x="1102.0" y="883.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1105.0" y="894.0"></text>
</g>
<g>
<title>java/util/zip/Inflater.inflate (1 samples, 0.04%)</title><rect x="1102.0" y="867.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1105.0" y="878.0"></text>
</g>
<g>
<title>java/util/zip/Inflater.inflateBytes (1 samples, 0.04%)</title><rect x="1102.0" y="851.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1105.0" y="862.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytes (1 samples, 0.04%)</title><rect x="1102.0" y="835.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1105.0" y="846.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.04%)</title><rect x="1102.0" y="819.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1105.0" y="830.0"></text>
</g>
<g>
<title>io/termd/core/telnet/netty/TelnetChannelHandler.channelRead (12 samples, 0.51%)</title><rect x="1102.5" y="1043.0" width="6.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1105.5" y="1054.0"></text>
</g>
<g>
<title>io/termd/core/telnet/TelnetConnection.receive (12 samples, 0.51%)</title><rect x="1102.5" y="1027.0" width="6.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1105.5" y="1038.0"></text>
</g>
<g>
<title>io/termd/core/telnet/TelnetConnection$Status$1.handle (11 samples, 0.47%)</title><rect x="1102.5" y="1011.0" width="5.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1105.5" y="1022.0"></text>
</g>
<g>
<title>io/termd/core/telnet/TelnetConnection.access$200 (11 samples, 0.47%)</title><rect x="1102.5" y="995.0" width="5.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1105.5" y="1006.0"></text>
</g>
<g>
<title>io/termd/core/telnet/TelnetConnection.appendData (11 samples, 0.47%)</title><rect x="1102.5" y="979.0" width="5.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1105.5" y="990.0"></text>
</g>
<g>
<title>io/termd/core/telnet/TelnetConnection.flushData (11 samples, 0.47%)</title><rect x="1102.5" y="963.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1105.5" y="974.0"></text>
</g>
<g>
<title>io/termd/core/telnet/TelnetTtyConnection.onData (11 samples, 0.47%)</title><rect x="1102.5" y="947.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1105.5" y="958.0"></text>
</g>
<g>
<title>io/termd/core/io/BinaryDecoder.write (11 samples, 0.47%)</title><rect x="1102.5" y="931.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1105.5" y="942.0"></text>
</g>
<g>
<title>io/termd/core/io/BinaryDecoder.write (11 samples, 0.47%)</title><rect x="1102.5" y="915.0" width="5.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1105.5" y="926.0"></text>
</g>
<g>
<title>io/termd/core/tty/ReadBuffer.accept (11 samples, 0.47%)</title><rect x="1102.5" y="899.0" width="5.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1105.5" y="910.0"></text>
</g>
<g>
<title>io/termd/core/tty/ReadBuffer.accept (11 samples, 0.47%)</title><rect x="1102.5" y="883.0" width="5.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1105.5" y="894.0"></text>
</g>
<g>
<title>io/termd/core/tty/TtyEventDecoder.accept (11 samples, 0.47%)</title><rect x="1102.5" y="867.0" width="5.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1105.5" y="878.0"></text>
</g>
<g>
<title>io/termd/core/tty/TtyEventDecoder.accept (11 samples, 0.47%)</title><rect x="1102.5" y="851.0" width="5.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1105.5" y="862.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline$Interaction$2.accept (11 samples, 0.47%)</title><rect x="1102.5" y="835.0" width="5.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1105.5" y="846.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline$Interaction$2.accept (11 samples, 0.47%)</title><rect x="1102.5" y="819.0" width="5.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1105.5" y="830.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline.access$500 (11 samples, 0.47%)</title><rect x="1102.5" y="803.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1105.5" y="814.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline.deliver (11 samples, 0.47%)</title><rect x="1102.5" y="787.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1105.5" y="798.0"></text>
</g>
<g>
<title>io/termd/core/readline/EventQueue.hasNext (1 samples, 0.04%)</title><rect x="1103.5" y="771.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1106.5" y="782.0"></text>
</g>
<g>
<title>io/termd/core/readline/EventQueue.peek (1 samples, 0.04%)</title><rect x="1103.5" y="755.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1106.5" y="766.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline$Interaction.access$200 (8 samples, 0.34%)</title><rect x="1104.0" y="771.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1107.0" y="782.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline$Interaction.handle (8 samples, 0.34%)</title><rect x="1104.0" y="755.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1107.0" y="766.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline$2.apply (4 samples, 0.17%)</title><rect x="1104.0" y="739.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1107.0" y="750.0"></text>
</g>
<g>
<title>io/termd/core/readline/LineBuffer.toString (1 samples, 0.04%)</title><rect x="1104.0" y="723.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1107.0" y="734.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.appendCodePoint (1 samples, 0.04%)</title><rect x="1104.0" y="707.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1107.0" y="718.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline$2.addToHistory (1 samples, 0.04%)</title><rect x="1104.5" y="723.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1107.5" y="734.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.next (1 samples, 0.04%)</title><rect x="1104.5" y="707.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1107.5" y="718.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline$Interaction.access$000 (2 samples, 0.08%)</title><rect x="1105.0" y="723.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1108.0" y="734.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline$Interaction.end (2 samples, 0.08%)</title><rect x="1105.0" y="707.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1108.0" y="718.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/handlers/term/RequestHandler.accept (2 samples, 0.08%)</title><rect x="1105.0" y="691.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1108.0" y="702.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/handlers/term/RequestHandler.accept (2 samples, 0.08%)</title><rect x="1105.0" y="675.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1108.0" y="686.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/handlers/shell/ShellLineHandler.handle (2 samples, 0.08%)</title><rect x="1105.0" y="659.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1108.0" y="670.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/handlers/shell/ShellLineHandler.handle (2 samples, 0.08%)</title><rect x="1105.0" y="643.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1108.0" y="654.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/handlers/shell/ShellLineHandler.createJob (2 samples, 0.08%)</title><rect x="1105.0" y="627.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1108.0" y="638.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/term/impl/TermImpl.echo (2 samples, 0.08%)</title><rect x="1105.0" y="611.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1108.0" y="622.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/term/impl/TermImpl.echo (2 samples, 0.08%)</title><rect x="1105.0" y="595.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1108.0" y="606.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/term/impl/TermImpl.echo (2 samples, 0.08%)</title><rect x="1105.0" y="579.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1108.0" y="590.0"></text>
</g>
<g>
<title>io/termd/core/tty/TtyOutputMode.accept (2 samples, 0.08%)</title><rect x="1105.0" y="563.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1108.0" y="574.0"></text>
</g>
<g>
<title>io/termd/core/tty/TtyOutputMode.accept (2 samples, 0.08%)</title><rect x="1105.0" y="547.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1108.0" y="558.0"></text>
</g>
<g>
<title>io/termd/core/tty/TtyOutputMode.sendChunk (2 samples, 0.08%)</title><rect x="1105.0" y="531.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1108.0" y="542.0"></text>
</g>
<g>
<title>io/termd/core/io/BinaryEncoder.accept (2 samples, 0.08%)</title><rect x="1105.0" y="515.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1108.0" y="526.0"></text>
</g>
<g>
<title>io/termd/core/io/BinaryEncoder.accept (2 samples, 0.08%)</title><rect x="1105.0" y="499.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1108.0" y="510.0"></text>
</g>
<g>
<title>io/termd/core/telnet/TelnetTtyConnection$2.accept (1 samples, 0.04%)</title><rect x="1105.0" y="483.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1108.0" y="494.0"></text>
</g>
<g>
<title>io/termd/core/telnet/TelnetTtyConnection$2.accept (1 samples, 0.04%)</title><rect x="1105.0" y="467.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1108.0" y="478.0"></text>
</g>
<g>
<title>io/termd/core/telnet/TelnetConnection.write (1 samples, 0.04%)</title><rect x="1105.0" y="451.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1108.0" y="462.0"></text>
</g>
<g>
<title>io/termd/core/telnet/netty/NettyTelnetConnection.send (1 samples, 0.04%)</title><rect x="1105.0" y="435.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1108.0" y="446.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.writeAndFlush (1 samples, 0.04%)</title><rect x="1105.0" y="419.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1108.0" y="430.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.newPromise (1 samples, 0.04%)</title><rect x="1105.0" y="403.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1108.0" y="414.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/DefaultChannelPromise.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1105.0" y="387.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1108.0" y="398.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.04%)</title><rect x="1105.0" y="371.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1108.0" y="382.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.04%)</title><rect x="1105.0" y="355.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1108.0" y="366.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle, methodHandle, int, int, CompLevel, nmethod*, JavaThread*) (1 samples, 0.04%)</title><rect x="1105.0" y="339.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1108.0" y="350.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::method_invocation_event(methodHandle, methodHandle, CompLevel, nmethod*, JavaThread*) (1 samples, 0.04%)</title><rect x="1105.0" y="323.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1108.0" y="334.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.04%)</title><rect x="1105.0" y="307.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1108.0" y="318.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::submit_compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.04%)</title><rect x="1105.0" y="291.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1108.0" y="302.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle, int, int, methodHandle, int, char const*, Thread*) (1 samples, 0.04%)</title><rect x="1105.0" y="275.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1108.0" y="286.0"></text>
</g>
<g>
<title>CompileBroker::compile_method_base(methodHandle, int, int, methodHandle, int, char const*, Thread*) (1 samples, 0.04%)</title><rect x="1105.0" y="259.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1108.0" y="270.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.04%)</title><rect x="1105.0" y="243.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1108.0" y="254.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.04%)</title><rect x="1105.0" y="227.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1108.0" y="238.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (1 samples, 0.04%)</title><rect x="1105.0" y="211.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1108.0" y="222.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.04%)</title><rect x="1105.0" y="195.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1108.0" y="206.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.04%)</title><rect x="1105.0" y="179.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1108.0" y="190.0"></text>
</g>
<g>
<title>java/nio/charset/Charset.encode (1 samples, 0.04%)</title><rect x="1105.5" y="483.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1108.5" y="494.0"></text>
</g>
<g>
<title>sun/nio/cs/ThreadLocalCoders.encoderFor (1 samples, 0.04%)</title><rect x="1105.5" y="467.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1108.5" y="478.0"></text>
</g>
<g>
<title>sun/nio/cs/ThreadLocalCoders$Cache.forName (1 samples, 0.04%)</title><rect x="1105.5" y="451.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1108.5" y="462.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline$Interaction.refresh (4 samples, 0.17%)</title><rect x="1106.0" y="739.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1109.0" y="750.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline$Interaction.refresh (4 samples, 0.17%)</title><rect x="1106.0" y="723.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1109.0" y="734.0"></text>
</g>
<g>
<title>io/termd/core/readline/LineBuffer.update (2 samples, 0.08%)</title><rect x="1106.0" y="707.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1109.0" y="718.0"></text>
</g>
<g>
<title>io/termd/core/readline/LineBuffer$Update.perform (2 samples, 0.08%)</title><rect x="1106.0" y="691.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1109.0" y="702.0"></text>
</g>
<g>
<title>io/termd/core/readline/LineBuffer$Update.moveCursor (1 samples, 0.04%)</title><rect x="1106.5" y="675.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1109.5" y="686.0"></text>
</g>
<g>
<title>io/termd/core/tty/TtyOutputMode.accept (2 samples, 0.08%)</title><rect x="1107.0" y="707.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1110.0" y="718.0"></text>
</g>
<g>
<title>io/termd/core/tty/TtyOutputMode.accept (2 samples, 0.08%)</title><rect x="1107.0" y="691.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1110.0" y="702.0"></text>
</g>
<g>
<title>io/termd/core/tty/TtyOutputMode.sendChunk (2 samples, 0.08%)</title><rect x="1107.0" y="675.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1110.0" y="686.0"></text>
</g>
<g>
<title>io/termd/core/io/BinaryEncoder.accept (2 samples, 0.08%)</title><rect x="1107.0" y="659.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1110.0" y="670.0"></text>
</g>
<g>
<title>io/termd/core/io/BinaryEncoder.accept (2 samples, 0.08%)</title><rect x="1107.0" y="643.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1110.0" y="654.0"></text>
</g>
<g>
<title>io/termd/core/telnet/TelnetTtyConnection$2.accept (2 samples, 0.08%)</title><rect x="1107.0" y="627.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1110.0" y="638.0"></text>
</g>
<g>
<title>io/termd/core/telnet/TelnetTtyConnection$2.accept (2 samples, 0.08%)</title><rect x="1107.0" y="611.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1110.0" y="622.0"></text>
</g>
<g>
<title>io/termd/core/telnet/TelnetConnection.write (2 samples, 0.08%)</title><rect x="1107.0" y="595.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1110.0" y="606.0"></text>
</g>
<g>
<title>io/termd/core/telnet/netty/NettyTelnetConnection.send (2 samples, 0.08%)</title><rect x="1107.0" y="579.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1110.0" y="590.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.writeAndFlush (2 samples, 0.08%)</title><rect x="1107.0" y="563.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1110.0" y="574.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.writeAndFlush (2 samples, 0.08%)</title><rect x="1107.0" y="547.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1110.0" y="558.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.write (2 samples, 0.08%)</title><rect x="1107.0" y="531.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1110.0" y="542.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.invokeWriteAndFlush (2 samples, 0.08%)</title><rect x="1107.0" y="515.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1110.0" y="526.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.invokeFlush0 (1 samples, 0.04%)</title><rect x="1107.0" y="499.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1110.0" y="510.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/DefaultChannelPipeline$HeadContext.flush (1 samples, 0.04%)</title><rect x="1107.0" y="483.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1110.0" y="494.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannel$AbstractUnsafe.flush (1 samples, 0.04%)</title><rect x="1107.0" y="467.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1110.0" y="478.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/nio/AbstractNioChannel$AbstractNioUnsafe.flush0 (1 samples, 0.04%)</title><rect x="1107.0" y="451.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1110.0" y="462.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannel$AbstractUnsafe.flush0 (1 samples, 0.04%)</title><rect x="1107.0" y="435.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1110.0" y="446.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/socket/nio/NioSocketChannel.doWrite (1 samples, 0.04%)</title><rect x="1107.0" y="419.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1110.0" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.04%)</title><rect x="1107.0" y="403.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1110.0" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.04%)</title><rect x="1107.0" y="387.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1110.0" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (1 samples, 0.04%)</title><rect x="1107.0" y="371.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1110.0" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (1 samples, 0.04%)</title><rect x="1107.0" y="355.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1110.0" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (1 samples, 0.04%)</title><rect x="1107.0" y="339.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1110.0" y="350.0"></text>
</g>
<g>
<title>convertReturnVal (1 samples, 0.04%)</title><rect x="1107.0" y="323.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1110.0" y="334.0"></text>
</g>
<g>
<title>JNU_ThrowByNameWithLastError (1 samples, 0.04%)</title><rect x="1107.0" y="307.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1110.0" y="318.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.04%)</title><rect x="1107.0" y="291.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1110.0" y="302.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.invokeWrite0 (1 samples, 0.04%)</title><rect x="1107.5" y="499.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1110.5" y="510.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/DefaultChannelPipeline$HeadContext.write (1 samples, 0.04%)</title><rect x="1107.5" y="483.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1110.5" y="494.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannel$AbstractUnsafe.write (1 samples, 0.04%)</title><rect x="1107.5" y="467.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1110.5" y="478.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/util/ReferenceCountUtil.release (1 samples, 0.04%)</title><rect x="1107.5" y="451.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1110.5" y="462.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/buffer/AbstractReferenceCountedByteBuf.release (1 samples, 0.04%)</title><rect x="1107.5" y="435.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1110.5" y="446.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/buffer/AbstractReferenceCountedByteBuf.handleRelease (1 samples, 0.04%)</title><rect x="1107.5" y="419.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1110.5" y="430.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/buffer/UnpooledHeapByteBuf.deallocate (1 samples, 0.04%)</title><rect x="1107.5" y="403.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1110.5" y="414.0"></text>
</g>
<g>
<title>io/termd/core/telnet/TelnetConnection.flushDataIfNecessary (1 samples, 0.04%)</title><rect x="1108.0" y="1011.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1111.0" y="1022.0"></text>
</g>
<g>
<title>io/termd/core/telnet/TelnetConnection.flushData (1 samples, 0.04%)</title><rect x="1108.0" y="995.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1111.0" y="1006.0"></text>
</g>
<g>
<title>io/termd/core/telnet/TelnetTtyConnection.onData (1 samples, 0.04%)</title><rect x="1108.0" y="979.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1111.0" y="990.0"></text>
</g>
<g>
<title>io/termd/core/io/BinaryDecoder.write (1 samples, 0.04%)</title><rect x="1108.0" y="963.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1111.0" y="974.0"></text>
</g>
<g>
<title>io/termd/core/io/BinaryDecoder.write (1 samples, 0.04%)</title><rect x="1108.0" y="947.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1111.0" y="958.0"></text>
</g>
<g>
<title>io/termd/core/tty/ReadBuffer.accept (1 samples, 0.04%)</title><rect x="1108.0" y="931.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1111.0" y="942.0"></text>
</g>
<g>
<title>io/termd/core/tty/ReadBuffer.accept (1 samples, 0.04%)</title><rect x="1108.0" y="915.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1111.0" y="926.0"></text>
</g>
<g>
<title>io/termd/core/tty/TtyEventDecoder.accept (1 samples, 0.04%)</title><rect x="1108.0" y="899.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1111.0" y="910.0"></text>
</g>
<g>
<title>io/termd/core/tty/TtyEventDecoder.accept (1 samples, 0.04%)</title><rect x="1108.0" y="883.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1111.0" y="894.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline$Interaction$2.accept (1 samples, 0.04%)</title><rect x="1108.0" y="867.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1111.0" y="878.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline$Interaction$2.accept (1 samples, 0.04%)</title><rect x="1108.0" y="851.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1111.0" y="862.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline.access$500 (1 samples, 0.04%)</title><rect x="1108.0" y="835.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1111.0" y="846.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline.deliver (1 samples, 0.04%)</title><rect x="1108.0" y="819.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1111.0" y="830.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline$Interaction.access$200 (1 samples, 0.04%)</title><rect x="1108.0" y="803.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1111.0" y="814.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline$Interaction.handle (1 samples, 0.04%)</title><rect x="1108.0" y="787.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1111.0" y="798.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline$2.apply (1 samples, 0.04%)</title><rect x="1108.0" y="771.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1111.0" y="782.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline$Interaction.access$000 (1 samples, 0.04%)</title><rect x="1108.0" y="755.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1111.0" y="766.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline$Interaction.end (1 samples, 0.04%)</title><rect x="1108.0" y="739.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1111.0" y="750.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/handlers/term/RequestHandler.accept (1 samples, 0.04%)</title><rect x="1108.0" y="723.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1111.0" y="734.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/handlers/term/RequestHandler.accept (1 samples, 0.04%)</title><rect x="1108.0" y="707.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1111.0" y="718.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/handlers/shell/ShellLineHandler.handle (1 samples, 0.04%)</title><rect x="1108.0" y="691.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1111.0" y="702.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/handlers/shell/ShellLineHandler.handle (1 samples, 0.04%)</title><rect x="1108.0" y="675.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1111.0" y="686.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/handlers/shell/ShellLineHandler.createJob (1 samples, 0.04%)</title><rect x="1108.0" y="659.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1111.0" y="670.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/impl/ShellImpl.createJob (1 samples, 0.04%)</title><rect x="1108.0" y="643.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1111.0" y="654.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/system/impl/GlobalJobControllerImpl.createJob (1 samples, 0.04%)</title><rect x="1108.0" y="627.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1111.0" y="638.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/system/impl/JobControllerImpl.createJob (1 samples, 0.04%)</title><rect x="1108.0" y="611.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1111.0" y="622.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/system/impl/JobControllerImpl.createProcess (1 samples, 0.04%)</title><rect x="1108.0" y="595.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1111.0" y="606.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/system/impl/InternalCommandManager.getCommand (1 samples, 0.04%)</title><rect x="1108.0" y="579.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1111.0" y="590.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/system/impl/InternalCommandManager.getCommand (1 samples, 0.04%)</title><rect x="1108.0" y="563.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1111.0" y="574.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/command/impl/AnnotatedCommandImpl.name (1 samples, 0.04%)</title><rect x="1108.0" y="547.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1111.0" y="558.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/command/impl/AnnotatedCommandImpl.shouldOverridesName (1 samples, 0.04%)</title><rect x="1108.0" y="531.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1111.0" y="542.0"></text>
</g>
<g>
<title>java/lang/Class.getDeclaredMethod (1 samples, 0.04%)</title><rect x="1108.0" y="515.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1111.0" y="526.0"></text>
</g>
<g>
<title>java/lang/Class.searchMethods (1 samples, 0.04%)</title><rect x="1108.0" y="499.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1111.0" y="510.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/DefaultChannelPipeline.fireChannelReadComplete (1 samples, 0.04%)</title><rect x="1108.5" y="1155.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1111.5" y="1166.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.invokeChannelReadComplete (1 samples, 0.04%)</title><rect x="1108.5" y="1139.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1111.5" y="1150.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.invokeChannelReadComplete (1 samples, 0.04%)</title><rect x="1108.5" y="1123.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1111.5" y="1134.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/DefaultChannelPipeline$HeadContext.channelReadComplete (1 samples, 0.04%)</title><rect x="1108.5" y="1107.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1111.5" y="1118.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.fireChannelReadComplete (1 samples, 0.04%)</title><rect x="1108.5" y="1091.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1111.5" y="1102.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.invokeChannelReadComplete (1 samples, 0.04%)</title><rect x="1108.5" y="1075.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1111.5" y="1086.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.invokeChannelReadComplete (1 samples, 0.04%)</title><rect x="1108.5" y="1059.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1111.5" y="1070.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/CombinedChannelDuplexHandler.channelReadComplete (1 samples, 0.04%)</title><rect x="1108.5" y="1043.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1111.5" y="1054.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/handler/codec/ByteToMessageDecoder.channelReadComplete (1 samples, 0.04%)</title><rect x="1108.5" y="1027.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1111.5" y="1038.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelReadComplete (1 samples, 0.04%)</title><rect x="1108.5" y="1011.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1111.5" y="1022.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.fireChannelReadComplete (1 samples, 0.04%)</title><rect x="1108.5" y="995.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1111.5" y="1006.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.invokeChannelReadComplete (1 samples, 0.04%)</title><rect x="1108.5" y="979.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1111.5" y="990.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.invokeChannelReadComplete (1 samples, 0.04%)</title><rect x="1108.5" y="963.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1111.5" y="974.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/handler/codec/MessageAggregator.channelReadComplete (1 samples, 0.04%)</title><rect x="1108.5" y="947.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1111.5" y="958.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.fireChannelReadComplete (1 samples, 0.04%)</title><rect x="1108.5" y="931.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1111.5" y="942.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.invokeChannelReadComplete (1 samples, 0.04%)</title><rect x="1108.5" y="915.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1111.5" y="926.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.04%)</title><rect x="1108.5" y="899.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1111.5" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::initialize(Thread*) (1 samples, 0.04%)</title><rect x="1108.5" y="883.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1111.5" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(instanceKlassHandle, Thread*) (1 samples, 0.04%)</title><rect x="1108.5" y="867.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1111.5" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::call_class_initializer_impl(instanceKlassHandle, Thread*) (1 samples, 0.04%)</title><rect x="1108.5" y="851.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1111.5" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::class_initializer() (1 samples, 0.04%)</title><rect x="1108.5" y="835.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1111.5" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::find_method(Symbol*, Symbol*) const (1 samples, 0.04%)</title><rect x="1108.5" y="819.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1111.5" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.04%)</title><rect x="1108.5" y="803.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1111.5" y="814.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt;*, Symbol*) (1 samples, 0.04%)</title><rect x="1108.5" y="787.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1111.5" y="798.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/DefaultMaxMessagesRecvByteBufAllocator$MaxMessageHandle.allocate (1 samples, 0.04%)</title><rect x="1109.0" y="1155.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1112.0" y="1166.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/buffer/AbstractByteBufAllocator.ioBuffer (1 samples, 0.04%)</title><rect x="1109.0" y="1139.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1112.0" y="1150.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/buffer/AbstractByteBufAllocator.directBuffer (1 samples, 0.04%)</title><rect x="1109.0" y="1123.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1112.0" y="1134.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/buffer/AbstractByteBufAllocator.directBuffer (1 samples, 0.04%)</title><rect x="1109.0" y="1107.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1112.0" y="1118.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/buffer/PooledByteBufAllocator.newDirectBuffer (1 samples, 0.04%)</title><rect x="1109.0" y="1091.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1112.0" y="1102.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/util/concurrent/FastThreadLocal.get (1 samples, 0.04%)</title><rect x="1109.0" y="1075.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1112.0" y="1086.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/util/concurrent/FastThreadLocal.initialize (1 samples, 0.04%)</title><rect x="1109.0" y="1059.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1112.0" y="1070.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/buffer/PooledByteBufAllocator$PoolThreadLocalCache.initialValue (1 samples, 0.04%)</title><rect x="1109.0" y="1043.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1112.0" y="1054.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/buffer/PooledByteBufAllocator$PoolThreadLocalCache.initialValue (1 samples, 0.04%)</title><rect x="1109.0" y="1027.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1112.0" y="1038.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/buffer/PooledByteBufAllocator$PoolThreadLocalCache.leastUsedArena (1 samples, 0.04%)</title><rect x="1109.0" y="1011.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1112.0" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (1 samples, 0.04%)</title><rect x="1109.0" y="995.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1112.0" y="1006.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.04%)</title><rect x="1109.0" y="979.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1112.0" y="990.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.04%)</title><rect x="1109.0" y="963.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1112.0" y="974.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle, methodHandle, int, int, CompLevel, nmethod*, JavaThread*) (1 samples, 0.04%)</title><rect x="1109.0" y="947.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1112.0" y="958.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::method_invocation_event(methodHandle, methodHandle, CompLevel, nmethod*, JavaThread*) (1 samples, 0.04%)</title><rect x="1109.0" y="931.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1112.0" y="942.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.04%)</title><rect x="1109.0" y="915.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1112.0" y="926.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::submit_compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.04%)</title><rect x="1109.0" y="899.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1112.0" y="910.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle, int, int, methodHandle, int, char const*, Thread*) (1 samples, 0.04%)</title><rect x="1109.0" y="883.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1112.0" y="894.0"></text>
</g>
<g>
<title>Method::jmethod_id() (1 samples, 0.04%)</title><rect x="1109.0" y="867.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1112.0" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::get_jmethod_id(instanceKlassHandle, methodHandle) (1 samples, 0.04%)</title><rect x="1109.0" y="851.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1112.0" y="862.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/nio/AbstractNioMessageChannel$NioMessageUnsafe.read (1 samples, 0.04%)</title><rect x="1109.5" y="1171.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1112.5" y="1182.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/DefaultChannelPipeline.fireChannelReadComplete (1 samples, 0.04%)</title><rect x="1109.5" y="1155.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1112.5" y="1166.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.invokeChannelReadComplete (1 samples, 0.04%)</title><rect x="1109.5" y="1139.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1112.5" y="1150.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.invokeChannelReadComplete (1 samples, 0.04%)</title><rect x="1109.5" y="1123.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1112.5" y="1134.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/DefaultChannelPipeline$HeadContext.channelReadComplete (1 samples, 0.04%)</title><rect x="1109.5" y="1107.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1112.5" y="1118.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.fireChannelReadComplete (1 samples, 0.04%)</title><rect x="1109.5" y="1091.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1112.5" y="1102.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.invokeChannelReadComplete (1 samples, 0.04%)</title><rect x="1109.5" y="1075.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1112.5" y="1086.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.invokeChannelReadComplete (1 samples, 0.04%)</title><rect x="1109.5" y="1059.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1112.5" y="1070.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/handler/logging/LoggingHandler.channelReadComplete (1 samples, 0.04%)</title><rect x="1109.5" y="1043.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1112.5" y="1054.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/util/internal/logging/AbstractInternalLogger.log (1 samples, 0.04%)</title><rect x="1109.5" y="1027.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1112.5" y="1038.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/util/internal/logging/LocationAwareSlf4JLogger.info (1 samples, 0.04%)</title><rect x="1109.5" y="1011.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1112.5" y="1022.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/util/internal/logging/LocationAwareSlf4JLogger.log (1 samples, 0.04%)</title><rect x="1109.5" y="995.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1112.5" y="1006.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/ch/qos/logback/classic/Logger.log (1 samples, 0.04%)</title><rect x="1109.5" y="979.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1112.5" y="990.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (1 samples, 0.04%)</title><rect x="1109.5" y="963.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1112.5" y="974.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/ch/qos/logback/classic/Logger.buildLoggingEventAndAppend (1 samples, 0.04%)</title><rect x="1109.5" y="947.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1112.5" y="958.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/ch/qos/logback/classic/Logger.callAppenders (1 samples, 0.04%)</title><rect x="1109.5" y="931.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1112.5" y="942.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/ch/qos/logback/classic/Logger.appendLoopOnAppenders (1 samples, 0.04%)</title><rect x="1109.5" y="915.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1112.5" y="926.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/ch/qos/logback/core/spi/AppenderAttachableImpl.appendLoopOnAppenders (1 samples, 0.04%)</title><rect x="1109.5" y="899.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1112.5" y="910.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/ch/qos/logback/core/UnsynchronizedAppenderBase.doAppend (1 samples, 0.04%)</title><rect x="1109.5" y="883.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1112.5" y="894.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/ch/qos/logback/core/OutputStreamAppender.append (1 samples, 0.04%)</title><rect x="1109.5" y="867.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1112.5" y="878.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/ch/qos/logback/core/rolling/RollingFileAppender.subAppend (1 samples, 0.04%)</title><rect x="1109.5" y="851.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1112.5" y="862.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/ch/qos/logback/core/OutputStreamAppender.subAppend (1 samples, 0.04%)</title><rect x="1109.5" y="835.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1112.5" y="846.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/ch/qos/logback/core/encoder/LayoutWrappingEncoder.encode (1 samples, 0.04%)</title><rect x="1109.5" y="819.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1112.5" y="830.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/ch/qos/logback/classic/PatternLayout.doLayout (1 samples, 0.04%)</title><rect x="1109.5" y="803.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1112.5" y="814.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/ch/qos/logback/classic/PatternLayout.doLayout (1 samples, 0.04%)</title><rect x="1109.5" y="787.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1112.5" y="798.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/ch/qos/logback/core/pattern/PatternLayoutBase.writeLoopOnConverters (1 samples, 0.04%)</title><rect x="1109.5" y="771.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1112.5" y="782.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/ch/qos/logback/core/pattern/Converter.write (1 samples, 0.04%)</title><rect x="1109.5" y="755.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1112.5" y="766.0"></text>
</g>
<g>
<title>InterpreterRuntime::at_safepoint(JavaThread*) (1 samples, 0.04%)</title><rect x="1109.5" y="739.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1112.5" y="750.0"></text>
</g>
<g>
<title>ThreadInVMfromJava::~ThreadInVMfromJava() (1 samples, 0.04%)</title><rect x="1109.5" y="723.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1112.5" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans(JavaThreadState, JavaThreadState) (1 samples, 0.04%)</title><rect x="1109.5" y="707.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1112.5" y="718.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.04%)</title><rect x="1109.5" y="691.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1112.5" y="702.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (1 samples, 0.04%)</title><rect x="1109.5" y="675.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1112.5" y="686.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.04%)</title><rect x="1109.5" y="659.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1112.5" y="670.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/nio/NioEventLoop.select (3 samples, 0.13%)</title><rect x="1110.0" y="1219.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1113.0" y="1230.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/nio/SelectedSelectionKeySetSelector.select (3 samples, 0.13%)</title><rect x="1110.0" y="1203.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1113.0" y="1214.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (3 samples, 0.13%)</title><rect x="1110.0" y="1187.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1113.0" y="1198.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.04%)</title><rect x="1110.0" y="1171.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1113.0" y="1182.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (1 samples, 0.04%)</title><rect x="1110.0" y="1155.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1113.0" y="1166.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueArrayWrapper.poll (1 samples, 0.04%)</title><rect x="1110.0" y="1139.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1113.0" y="1150.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueArrayWrapper.kevent0 (1 samples, 0.04%)</title><rect x="1110.0" y="1123.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1113.0" y="1134.0"></text>
</g>
<g>
<title>kevent (1 samples, 0.04%)</title><rect x="1110.0" y="1107.0" width="0.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1113.0" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (2 samples, 0.08%)</title><rect x="1110.5" y="1171.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1113.5" y="1182.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (2 samples, 0.08%)</title><rect x="1110.5" y="1155.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1113.5" y="1166.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (2 samples, 0.08%)</title><rect x="1110.5" y="1139.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1113.5" y="1150.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueArrayWrapper.poll (2 samples, 0.08%)</title><rect x="1110.5" y="1123.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1113.5" y="1134.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueArrayWrapper.kevent0 (1 samples, 0.04%)</title><rect x="1110.5" y="1107.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1113.5" y="1118.0"></text>
</g>
<g>
<title>kevent (1 samples, 0.04%)</title><rect x="1110.5" y="1091.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1113.5" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueArrayWrapper.updateRegistrations (1 samples, 0.04%)</title><rect x="1111.0" y="1107.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1114.0" y="1118.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/util/concurrent/SingleThreadEventExecutor.runAllTasks (6 samples, 0.25%)</title><rect x="1111.5" y="1219.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1114.5" y="1230.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/util/concurrent/AbstractEventExecutor.safeExecute (6 samples, 0.25%)</title><rect x="1111.5" y="1203.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1114.5" y="1214.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannel$AbstractUnsafe$1.run (3 samples, 0.13%)</title><rect x="1111.5" y="1187.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1114.5" y="1198.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannel$AbstractUnsafe.access$200 (3 samples, 0.13%)</title><rect x="1111.5" y="1171.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1114.5" y="1182.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannel$AbstractUnsafe.register0 (3 samples, 0.13%)</title><rect x="1111.5" y="1155.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1114.5" y="1166.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/nio/AbstractNioChannel.doRegister (2 samples, 0.08%)</title><rect x="1111.5" y="1139.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1114.5" y="1150.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.register (2 samples, 0.08%)</title><rect x="1111.5" y="1123.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1114.5" y="1134.0"></text>
</g>
<g>
<title>InterpreterRuntime::monitorenter(JavaThread*, BasicObjectLock*) (2 samples, 0.08%)</title><rect x="1111.5" y="1107.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1114.5" y="1118.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (2 samples, 0.08%)</title><rect x="1111.5" y="1091.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1114.5" y="1102.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (2 samples, 0.08%)</title><rect x="1111.5" y="1075.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1114.5" y="1086.0"></text>
</g>
<g>
<title>VMThread::execute(VM_Operation*) (2 samples, 0.08%)</title><rect x="1111.5" y="1059.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1114.5" y="1070.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.04%)</title><rect x="1111.5" y="1043.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1114.5" y="1054.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.04%)</title><rect x="1111.5" y="1027.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1114.5" y="1038.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (1 samples, 0.04%)</title><rect x="1111.5" y="1011.0" width="0.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1114.5" y="1022.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.04%)</title><rect x="1111.5" y="995.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1114.5" y="1006.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.04%)</title><rect x="1111.5" y="979.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1114.5" y="990.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (1 samples, 0.04%)</title><rect x="1112.0" y="1043.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1115.0" y="1054.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.04%)</title><rect x="1112.0" y="1027.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1115.0" y="1038.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/socket/nio/NioSocketChannel.isActive (1 samples, 0.04%)</title><rect x="1112.5" y="1139.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1115.5" y="1150.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.isConnected (1 samples, 0.04%)</title><rect x="1112.5" y="1123.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1115.5" y="1134.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (1 samples, 0.04%)</title><rect x="1112.5" y="1107.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1115.5" y="1118.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.04%)</title><rect x="1112.5" y="1091.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1115.5" y="1102.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (1 samples, 0.04%)</title><rect x="1112.5" y="1075.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1115.5" y="1086.0"></text>
</g>
<g>
<title>VMThread::execute(VM_Operation*) (1 samples, 0.04%)</title><rect x="1112.5" y="1059.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1115.5" y="1070.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.04%)</title><rect x="1112.5" y="1043.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1115.5" y="1054.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.04%)</title><rect x="1112.5" y="1027.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1115.5" y="1038.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (1 samples, 0.04%)</title><rect x="1112.5" y="1011.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1115.5" y="1022.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.04%)</title><rect x="1112.5" y="995.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1115.5" y="1006.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.04%)</title><rect x="1112.5" y="979.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1115.5" y="990.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext$11.run (1 samples, 0.04%)</title><rect x="1113.0" y="1187.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1116.0" y="1198.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.access$1200 (1 samples, 0.04%)</title><rect x="1113.0" y="1171.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1116.0" y="1182.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.invokeClose (1 samples, 0.04%)</title><rect x="1113.0" y="1155.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1116.0" y="1166.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/handler/codec/http/websocketx/WebSocketServerProtocolHandler.close (1 samples, 0.04%)</title><rect x="1113.0" y="1139.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1116.0" y="1150.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/handler/codec/http/websocketx/WebSocketProtocolHandler.close (1 samples, 0.04%)</title><rect x="1113.0" y="1123.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1116.0" y="1134.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.04%)</title><rect x="1113.0" y="1107.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1116.0" y="1118.0"></text>
</g>
<g>
<title>InstanceKlass::initialize(Thread*) (1 samples, 0.04%)</title><rect x="1113.0" y="1091.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1116.0" y="1102.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(instanceKlassHandle, Thread*) (1 samples, 0.04%)</title><rect x="1113.0" y="1075.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1116.0" y="1086.0"></text>
</g>
<g>
<title>InstanceKlass::link_class(Thread*) (1 samples, 0.04%)</title><rect x="1113.0" y="1059.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1116.0" y="1070.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(instanceKlassHandle, bool, Thread*) (1 samples, 0.04%)</title><rect x="1113.0" y="1043.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1116.0" y="1054.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(instanceKlassHandle, bool, Thread*) (1 samples, 0.04%)</title><rect x="1113.0" y="1027.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1116.0" y="1038.0"></text>
</g>
<g>
<title>Verifier::verify(instanceKlassHandle, Verifier::Mode, bool, Thread*) (1 samples, 0.04%)</title><rect x="1113.0" y="1011.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1116.0" y="1022.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.04%)</title><rect x="1113.0" y="995.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1116.0" y="1006.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle, Thread*) (1 samples, 0.04%)</title><rect x="1113.0" y="979.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1116.0" y="990.0"></text>
</g>
<g>
<title>StackMapFrame::set_locals_from_arg(methodHandle, VerificationType, Thread*) (1 samples, 0.04%)</title><rect x="1113.0" y="963.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1116.0" y="974.0"></text>
</g>
<g>
<title>ClassVerifier::create_temporary_symbol(Symbol const*, int, int, Thread*) (1 samples, 0.04%)</title><rect x="1113.0" y="947.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1116.0" y="958.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.04%)</title><rect x="1113.0" y="931.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1116.0" y="942.0"></text>
</g>
<g>
<title>SymbolTable::hash_symbol(char const*, int) (1 samples, 0.04%)</title><rect x="1113.0" y="915.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1116.0" y="926.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext$7.run (1 samples, 0.04%)</title><rect x="1113.5" y="1187.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1116.5" y="1198.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.access$600 (1 samples, 0.04%)</title><rect x="1113.5" y="1171.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1116.5" y="1182.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (1 samples, 0.04%)</title><rect x="1113.5" y="1155.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1116.5" y="1166.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/SimpleChannelInboundHandler.channelRead (1 samples, 0.04%)</title><rect x="1113.5" y="1139.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1116.5" y="1150.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/term/impl/http/HttpRequestHandler.channelRead0 (1 samples, 0.04%)</title><rect x="1113.5" y="1123.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1116.5" y="1134.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/term/impl/http/HttpRequestHandler.channelRead0 (1 samples, 0.04%)</title><rect x="1113.5" y="1107.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1116.5" y="1118.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_ldc(JavaThread*, Bytecodes::Code) (1 samples, 0.04%)</title><rect x="1113.5" y="1091.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1116.5" y="1102.0"></text>
</g>
<g>
<title>ConstantPool::resolve_cached_constant_at(int, Thread*) (1 samples, 0.04%)</title><rect x="1113.5" y="1075.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1116.5" y="1086.0"></text>
</g>
<g>
<title>ConstantPool::resolve_constant_at_impl(constantPoolHandle, int, int, Thread*) (1 samples, 0.04%)</title><rect x="1113.5" y="1059.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1116.5" y="1070.0"></text>
</g>
<g>
<title>ConstantPool::string_at_impl(constantPoolHandle, int, int, Thread*) (1 samples, 0.04%)</title><rect x="1113.5" y="1043.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1116.5" y="1054.0"></text>
</g>
<g>
<title>StringTable::intern(Symbol*, Thread*) (1 samples, 0.04%)</title><rect x="1113.5" y="1027.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1116.5" y="1038.0"></text>
</g>
<g>
<title>StringTable::intern(Handle, unsigned short*, int, Thread*) (1 samples, 0.04%)</title><rect x="1113.5" y="1011.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1116.5" y="1022.0"></text>
</g>
<g>
<title>StringTable::lookup(int, unsigned short*, int, unsigned int) (1 samples, 0.04%)</title><rect x="1113.5" y="995.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1116.5" y="1006.0"></text>
</g>
<g>
<title>java_lang_String::equals(oopDesc*, unsigned short*, int) (1 samples, 0.04%)</title><rect x="1113.5" y="979.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1116.5" y="990.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/util/concurrent/ScheduledFutureTask.run (1 samples, 0.04%)</title><rect x="1114.0" y="1187.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1117.0" y="1198.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/util/concurrent/PromiseTask.runTask (1 samples, 0.04%)</title><rect x="1114.0" y="1171.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1117.0" y="1182.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/term/impl/httptelnet/ProtocolDetectHandler$1.run (1 samples, 0.04%)</title><rect x="1114.0" y="1155.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1117.0" y="1166.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.fireChannelActive (1 samples, 0.04%)</title><rect x="1114.0" y="1139.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1117.0" y="1150.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.invokeChannelActive (1 samples, 0.04%)</title><rect x="1114.0" y="1123.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1117.0" y="1134.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.invokeChannelActive (1 samples, 0.04%)</title><rect x="1114.0" y="1107.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1117.0" y="1118.0"></text>
</g>
<g>
<title>io/termd/core/telnet/netty/TelnetChannelHandler.channelActive (1 samples, 0.04%)</title><rect x="1114.0" y="1091.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1117.0" y="1102.0"></text>
</g>
<g>
<title>io/termd/core/telnet/TelnetConnection.onInit (1 samples, 0.04%)</title><rect x="1114.0" y="1075.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1117.0" y="1086.0"></text>
</g>
<g>
<title>io/termd/core/telnet/TelnetTtyConnection.onOpen (1 samples, 0.04%)</title><rect x="1114.0" y="1059.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1117.0" y="1070.0"></text>
</g>
<g>
<title>io/termd/core/telnet/TelnetTtyConnection.checkAccept (1 samples, 0.04%)</title><rect x="1114.0" y="1043.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1117.0" y="1054.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/term/impl/httptelnet/HttpTelnetTermServer$1.accept (1 samples, 0.04%)</title><rect x="1114.0" y="1027.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1117.0" y="1038.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/term/impl/httptelnet/HttpTelnetTermServer$1.accept (1 samples, 0.04%)</title><rect x="1114.0" y="1011.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1117.0" y="1022.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/term/impl/Helper.loadKeymap (1 samples, 0.04%)</title><rect x="1114.0" y="995.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1117.0" y="1006.0"></text>
</g>
<g>
<title>io/termd/core/readline/Keymap.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1114.0" y="979.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1117.0" y="990.0"></text>
</g>
<g>
<title>io/termd/core/readline/InputrcParser.parse (1 samples, 0.04%)</title><rect x="1114.0" y="963.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1117.0" y="974.0"></text>
</g>
<g>
<title>java/util/Scanner.next (1 samples, 0.04%)</title><rect x="1114.0" y="947.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1117.0" y="958.0"></text>
</g>
<g>
<title>java/util/Scanner.getCompleteTokenInBuffer (1 samples, 0.04%)</title><rect x="1114.0" y="931.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1117.0" y="942.0"></text>
</g>
<g>
<title>java/util/regex/Matcher.group (1 samples, 0.04%)</title><rect x="1114.0" y="915.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1117.0" y="926.0"></text>
</g>
<g>
<title>java/util/regex/Matcher.group (1 samples, 0.04%)</title><rect x="1114.0" y="899.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1117.0" y="910.0"></text>
</g>
<g>
<title>java/util/regex/Matcher.getSubSequence (1 samples, 0.04%)</title><rect x="1114.0" y="883.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1117.0" y="894.0"></text>
</g>
<g>
<title>java/nio/HeapCharBuffer.subSequence (1 samples, 0.04%)</title><rect x="1114.0" y="867.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1117.0" y="878.0"></text>
</g>
<g>
<title>java/nio/HeapCharBuffer.subSequence (1 samples, 0.04%)</title><rect x="1114.0" y="851.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1117.0" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (2 samples, 0.08%)</title><rect x="1114.5" y="1283.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1117.5" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (2 samples, 0.08%)</title><rect x="1114.5" y="1267.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1117.5" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/ScheduledThreadPoolExecutor$ScheduledFutureTask.run (1 samples, 0.04%)</title><rect x="1114.5" y="1251.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1117.5" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201 (1 samples, 0.04%)</title><rect x="1114.5" y="1235.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1117.5" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (1 samples, 0.04%)</title><rect x="1114.5" y="1219.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1117.5" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$RunnableAdapter.call (1 samples, 0.04%)</title><rect x="1114.5" y="1203.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1117.5" y="1214.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/system/impl/ProcessImpl$CommandProcessTask.run (1 samples, 0.04%)</title><rect x="1114.5" y="1187.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1117.5" y="1198.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/command/impl/AnnotatedCommandImpl$ProcessHandler.handle (1 samples, 0.04%)</title><rect x="1114.5" y="1171.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1117.5" y="1182.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/command/impl/AnnotatedCommandImpl$ProcessHandler.handle (1 samples, 0.04%)</title><rect x="1114.5" y="1155.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1117.5" y="1166.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/command/impl/AnnotatedCommandImpl.access$100 (1 samples, 0.04%)</title><rect x="1114.5" y="1139.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1117.5" y="1150.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/command/impl/AnnotatedCommandImpl.process (1 samples, 0.04%)</title><rect x="1114.5" y="1123.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1117.5" y="1134.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/command/monitor200/ProfilerCommand.process (1 samples, 0.04%)</title><rect x="1114.5" y="1107.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1117.5" y="1118.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/command/monitor200/ProfilerCommand.execute (1 samples, 0.04%)</title><rect x="1114.5" y="1091.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1117.5" y="1102.0"></text>
</g>
<g>
<title>one/profiler/AsyncProfiler.execute (1 samples, 0.04%)</title><rect x="1114.5" y="1075.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1117.5" y="1086.0"></text>
</g>
<g>
<title>one/profiler/AsyncProfiler.execute0 (1 samples, 0.04%)</title><rect x="1114.5" y="1059.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1117.5" y="1070.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.04%)</title><rect x="1114.5" y="1043.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1117.5" y="1054.0"></text>
</g>
<g>
<title>com/taobao/arthas/agent/ArthasClassloader.loadClass (1 samples, 0.04%)</title><rect x="1114.5" y="1027.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1117.5" y="1038.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.04%)</title><rect x="1114.5" y="1011.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1117.5" y="1022.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.04%)</title><rect x="1114.5" y="995.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1117.5" y="1006.0"></text>
</g>
<g>
<title>java/net/URLClassLoader.findClass (1 samples, 0.04%)</title><rect x="1114.5" y="979.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1117.5" y="990.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (1 samples, 0.04%)</title><rect x="1114.5" y="963.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1117.5" y="974.0"></text>
</g>
<g>
<title>java/net/URLClassLoader$1.run (1 samples, 0.04%)</title><rect x="1114.5" y="947.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1117.5" y="958.0"></text>
</g>
<g>
<title>java/net/URLClassLoader$1.run (1 samples, 0.04%)</title><rect x="1114.5" y="931.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1117.5" y="942.0"></text>
</g>
<g>
<title>sun/misc/URLClassPath.getResource (1 samples, 0.04%)</title><rect x="1114.5" y="915.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1117.5" y="926.0"></text>
</g>
<g>
<title>sun/misc/URLClassPath$JarLoader.getResource (1 samples, 0.04%)</title><rect x="1114.5" y="899.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1117.5" y="910.0"></text>
</g>
<g>
<title>sun/misc/URLClassPath$JarLoader.ensureOpen (1 samples, 0.04%)</title><rect x="1114.5" y="883.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1117.5" y="894.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (1 samples, 0.04%)</title><rect x="1114.5" y="867.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1117.5" y="878.0"></text>
</g>
<g>
<title>sun/misc/URLClassPath$JarLoader$1.run (1 samples, 0.04%)</title><rect x="1114.5" y="851.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1117.5" y="862.0"></text>
</g>
<g>
<title>sun/misc/URLClassPath$JarLoader$1.run (1 samples, 0.04%)</title><rect x="1114.5" y="835.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1117.5" y="846.0"></text>
</g>
<g>
<title>sun/misc/URLClassPath$JarLoader.access$800 (1 samples, 0.04%)</title><rect x="1114.5" y="819.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1117.5" y="830.0"></text>
</g>
<g>
<title>sun/misc/URLClassPath$JarLoader.getJarFile (1 samples, 0.04%)</title><rect x="1114.5" y="803.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1117.5" y="814.0"></text>
</g>
<g>
<title>java/util/jar/JarFile.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1114.5" y="787.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1117.5" y="798.0"></text>
</g>
<g>
<title>java/util/jar/JarFile.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1114.5" y="771.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1117.5" y="782.0"></text>
</g>
<g>
<title>java/util/zip/ZipFile.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1114.5" y="755.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1117.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (1 samples, 0.04%)</title><rect x="1115.0" y="1251.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1118.0" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/ScheduledThreadPoolExecutor$DelayedWorkQueue.take (1 samples, 0.04%)</title><rect x="1115.0" y="1235.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1118.0" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ScheduledThreadPoolExecutor$DelayedWorkQueue.take (1 samples, 0.04%)</title><rect x="1115.0" y="1219.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1118.0" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.awaitNanos (1 samples, 0.04%)</title><rect x="1115.0" y="1203.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1118.0" y="1214.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.04%)</title><rect x="1115.0" y="1187.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1118.0" y="1198.0"></text>
</g>
<g>
<title>InterpreterRuntime::bci(JavaThread*) (1 samples, 0.04%)</title><rect x="1115.0" y="1171.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1118.0" y="1182.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.04%)</title><rect x="1115.0" y="1155.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1118.0" y="1166.0"></text>
</g>
<g>
<title>CodeBlob::is_nmethod() const (1 samples, 0.04%)</title><rect x="1115.0" y="1139.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1118.0" y="1150.0"></text>
</g>
<g>
<title>java/lang/ref/Finalizer$FinalizerThread.run (1 samples, 0.04%)</title><rect x="1115.5" y="1299.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1118.5" y="1310.0"></text>
</g>
<g>
<title>java/lang/ref/ReferenceQueue.remove (1 samples, 0.04%)</title><rect x="1115.5" y="1283.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1118.5" y="1294.0"></text>
</g>
<g>
<title>java/lang/ref/ReferenceQueue.remove (1 samples, 0.04%)</title><rect x="1115.5" y="1267.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1118.5" y="1278.0"></text>
</g>
<g>
<title>java/lang/Object.wait (1 samples, 0.04%)</title><rect x="1115.5" y="1251.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1118.5" y="1262.0"></text>
</g>
<g>
<title>JVM_MonitorWait (1 samples, 0.04%)</title><rect x="1115.5" y="1235.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1118.5" y="1246.0"></text>
</g>
<g>
<title>ObjectSynchronizer::wait(Handle, long, Thread*) (1 samples, 0.04%)</title><rect x="1115.5" y="1219.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1118.5" y="1230.0"></text>
</g>
<g>
<title>ObjectMonitor::wait(long, bool, Thread*) (1 samples, 0.04%)</title><rect x="1115.5" y="1203.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1118.5" y="1214.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.04%)</title><rect x="1115.5" y="1187.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1118.5" y="1198.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.04%)</title><rect x="1115.5" y="1171.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1118.5" y="1182.0"></text>
</g>
<g>
<title>thread_start (148 samples, 6.27%)</title><rect x="1116.0" y="1299.0" width="74.0" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1119.0" y="1310.0">thread_s..</text>
</g>
<g>
<title>_pthread_start (148 samples, 6.27%)</title><rect x="1116.0" y="1283.0" width="74.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1119.0" y="1294.0">_pthread..</text>
</g>
<g>
<title>_pthread_body (148 samples, 6.27%)</title><rect x="1116.0" y="1267.0" width="74.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1119.0" y="1278.0">_pthread..</text>
</g>
<g>
<title>java_start(Thread*) (148 samples, 6.27%)</title><rect x="1116.0" y="1251.0" width="74.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1119.0" y="1262.0">java_sta..</text>
</g>
<g>
<title>GCTaskThread::run() (31 samples, 1.31%)</title><rect x="1116.0" y="1235.0" width="15.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1119.0" y="1246.0"></text>
</g>
<g>
<title>GCTaskManager::get_task(unsigned int) (6 samples, 0.25%)</title><rect x="1116.0" y="1219.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1119.0" y="1230.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (5 samples, 0.21%)</title><rect x="1116.0" y="1203.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1119.0" y="1214.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (5 samples, 0.21%)</title><rect x="1116.0" y="1187.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1119.0" y="1198.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (4 samples, 0.17%)</title><rect x="1116.0" y="1171.0" width="2.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1119.0" y="1182.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (4 samples, 0.17%)</title><rect x="1116.0" y="1155.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1119.0" y="1166.0"></text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 0.17%)</title><rect x="1116.0" y="1139.0" width="2.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1119.0" y="1150.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (1 samples, 0.04%)</title><rect x="1118.0" y="1171.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1121.0" y="1182.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.04%)</title><rect x="1118.0" y="1155.0" width="0.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1121.0" y="1166.0"></text>
</g>
<g>
<title>SynchronizedGCTaskQueue::dequeue() (1 samples, 0.04%)</title><rect x="1118.5" y="1203.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1121.5" y="1214.0"></text>
</g>
<g>
<title>OldToYoungRootsTask::do_it(GCTaskManager*, unsigned int) (5 samples, 0.21%)</title><rect x="1119.0" y="1219.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1122.0" y="1230.0"></text>
</g>
<g>
<title>CardTableExtension::scavenge_contents_parallel(ObjectStartArray*, MutableSpace*, HeapWord*, PSPromotionManager*, unsigned int, unsigned int) (5 samples, 0.21%)</title><rect x="1119.0" y="1203.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1122.0" y="1214.0"></text>
</g>
<g>
<title>ObjectStartArray::object_start(HeapWord*) const (2 samples, 0.08%)</title><rect x="1119.0" y="1187.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1122.0" y="1198.0"></text>
</g>
<g>
<title>ObjectStartArray::offset_addr_for_block(signed char*) const (1 samples, 0.04%)</title><rect x="1119.0" y="1171.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1122.0" y="1182.0"></text>
</g>
<g>
<title>oopDesc::size() (1 samples, 0.04%)</title><rect x="1119.5" y="1171.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1122.5" y="1182.0"></text>
</g>
<g>
<title>ObjectStartArray::offset_addr_for_block(signed char*) const (3 samples, 0.13%)</title><rect x="1120.0" y="1187.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1123.0" y="1198.0"></text>
</g>
<g>
<title>StealTask::do_it(GCTaskManager*, unsigned int) (12 samples, 0.51%)</title><rect x="1121.5" y="1219.0" width="6.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1124.5" y="1230.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (9 samples, 0.38%)</title><rect x="1121.5" y="1203.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1124.5" y="1214.0"></text>
</g>
<g>
<title>xdrrec_ops (9 samples, 0.38%)</title><rect x="1121.5" y="1187.0" width="4.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1124.5" y="1198.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.13%)</title><rect x="1126.0" y="1203.0" width="1.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1129.0" y="1214.0"></text>
</g>
<g>
<title>ThreadRootsTask::do_it(GCTaskManager*, unsigned int) (5 samples, 0.21%)</title><rect x="1127.5" y="1219.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1130.5" y="1230.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (5 samples, 0.21%)</title><rect x="1127.5" y="1203.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1130.5" y="1214.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.04%)</title><rect x="1127.5" y="1187.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1130.5" y="1198.0"></text>
</g>
<g>
<title>StackFrameStream::next() (1 samples, 0.04%)</title><rect x="1128.0" y="1187.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1131.0" y="1198.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.04%)</title><rect x="1128.0" y="1171.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1131.0" y="1182.0"></text>
</g>
<g>
<title>frame::sender_for_interpreter_frame(RegisterMap*) const (1 samples, 0.04%)</title><rect x="1128.0" y="1155.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1131.0" y="1166.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.04%)</title><rect x="1128.0" y="1139.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1131.0" y="1150.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (1 samples, 0.04%)</title><rect x="1128.0" y="1123.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1131.0" y="1134.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.04%)</title><rect x="1128.0" y="1107.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1131.0" y="1118.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, CLDClosure*, RegisterMap const*, bool) (3 samples, 0.13%)</title><rect x="1128.5" y="1187.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1131.5" y="1198.0"></text>
</g>
<g>
<title>ConstantPool::impl_signature_ref_at(int, bool) (1 samples, 0.04%)</title><rect x="1129.0" y="1171.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1132.0" y="1182.0"></text>
</g>
<g>
<title>ConstantPool::impl_name_and_type_ref_index_at(int, bool) (1 samples, 0.04%)</title><rect x="1129.0" y="1155.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1132.0" y="1166.0"></text>
</g>
<g>
<title>Method::mask_for(int, InterpreterOopMap*) (1 samples, 0.04%)</title><rect x="1129.5" y="1171.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1132.5" y="1182.0"></text>
</g>
<g>
<title>InstanceKlass::mask_for(methodHandle, int, InterpreterOopMap*) (1 samples, 0.04%)</title><rect x="1129.5" y="1155.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1132.5" y="1166.0"></text>
</g>
<g>
<title>OopMapCache::lookup(methodHandle, int, InterpreterOopMap*) const (1 samples, 0.04%)</title><rect x="1129.5" y="1139.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1132.5" y="1150.0"></text>
</g>
<g>
<title>WaitForBarrierGCTask::do_it(GCTaskManager*, unsigned int) (3 samples, 0.13%)</title><rect x="1130.0" y="1219.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1133.0" y="1230.0"></text>
</g>
<g>
<title>BarrierGCTask::do_it_internal(GCTaskManager*, unsigned int) (3 samples, 0.13%)</title><rect x="1130.0" y="1203.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1133.0" y="1214.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (3 samples, 0.13%)</title><rect x="1130.0" y="1187.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1133.0" y="1198.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (3 samples, 0.13%)</title><rect x="1130.0" y="1171.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1133.0" y="1182.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (3 samples, 0.13%)</title><rect x="1130.0" y="1155.0" width="1.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1133.0" y="1166.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (3 samples, 0.13%)</title><rect x="1130.0" y="1139.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1133.0" y="1150.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.08%)</title><rect x="1130.0" y="1123.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1133.0" y="1134.0"></text>
</g>
<g>
<title>_pthread_cond_wait (1 samples, 0.04%)</title><rect x="1131.0" y="1123.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1134.0" y="1134.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (1 samples, 0.04%)</title><rect x="1131.0" y="1107.0" width="0.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1134.0" y="1118.0"></text>
</g>
<g>
<title>__psynch_mutexwait (1 samples, 0.04%)</title><rect x="1131.0" y="1091.0" width="0.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1134.0" y="1102.0"></text>
</g>
<g>
<title>JavaThread::run() (90 samples, 3.81%)</title><rect x="1131.5" y="1235.0" width="45.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1134.5" y="1246.0">Java..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (90 samples, 3.81%)</title><rect x="1131.5" y="1219.0" width="45.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1134.5" y="1230.0">Java..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (83 samples, 3.52%)</title><rect x="1131.5" y="1203.0" width="41.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1134.5" y="1214.0">Com..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (74 samples, 3.14%)</title><rect x="1131.5" y="1187.0" width="37.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1134.5" y="1198.0">Com..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (60 samples, 2.54%)</title><rect x="1131.5" y="1171.0" width="30.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1134.5" y="1182.0">C2..</text>
</g>
<g>
<title>Arena::~Arena() (1 samples, 0.04%)</title><rect x="1131.5" y="1155.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1134.5" y="1166.0"></text>
</g>
<g>
<title>Arena::destruct_contents() (1 samples, 0.04%)</title><rect x="1131.5" y="1139.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1134.5" y="1150.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (1 samples, 0.04%)</title><rect x="1131.5" y="1123.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1134.5" y="1134.0"></text>
</g>
<g>
<title>free_large (1 samples, 0.04%)</title><rect x="1131.5" y="1107.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1134.5" y="1118.0"></text>
</g>
<g>
<title>mvm_deallocate_pages (1 samples, 0.04%)</title><rect x="1131.5" y="1091.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1134.5" y="1102.0"></text>
</g>
<g>
<title>si_module_static_search.search_vtable (1 samples, 0.04%)</title><rect x="1131.5" y="1075.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1134.5" y="1086.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (59 samples, 2.50%)</title><rect x="1132.0" y="1155.0" width="29.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1135.0" y="1166.0">Co..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.04%)</title><rect x="1132.0" y="1139.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1135.0" y="1150.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.04%)</title><rect x="1132.0" y="1123.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1135.0" y="1134.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.04%)</title><rect x="1132.0" y="1107.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1135.0" y="1118.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.04%)</title><rect x="1132.0" y="1091.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1135.0" y="1102.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.04%)</title><rect x="1132.0" y="1075.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1135.0" y="1086.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.04%)</title><rect x="1132.0" y="1059.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1135.0" y="1070.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.04%)</title><rect x="1132.0" y="1043.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1135.0" y="1054.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.04%)</title><rect x="1132.0" y="1027.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1135.0" y="1038.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.04%)</title><rect x="1132.0" y="1011.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1135.0" y="1022.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.04%)</title><rect x="1132.0" y="995.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1135.0" y="1006.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.04%)</title><rect x="1132.0" y="979.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1135.0" y="990.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.04%)</title><rect x="1132.0" y="963.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1135.0" y="974.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (24 samples, 1.02%)</title><rect x="1132.5" y="1139.0" width="12.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1135.5" y="1150.0"></text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.04%)</title><rect x="1132.5" y="1123.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1135.5" y="1134.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.04%)</title><rect x="1132.5" y="1107.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1135.5" y="1118.0"></text>
</g>
<g>
<title>Compile::init_scratch_buffer_blob(int) (1 samples, 0.04%)</title><rect x="1132.5" y="1091.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1135.5" y="1102.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.04%)</title><rect x="1132.5" y="1075.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1135.5" y="1086.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.04%)</title><rect x="1132.5" y="1059.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1135.5" y="1070.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.04%)</title><rect x="1132.5" y="1043.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1135.5" y="1054.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (1 samples, 0.04%)</title><rect x="1132.5" y="1027.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1135.5" y="1038.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.04%)</title><rect x="1132.5" y="1011.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1135.5" y="1022.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.04%)</title><rect x="1132.5" y="995.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1135.5" y="1006.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.04%)</title><rect x="1133.0" y="1123.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1136.0" y="1134.0"></text>
</g>
<g>
<title>NonSafepointEmitter::observe_instruction(Node*, int) (1 samples, 0.04%)</title><rect x="1133.0" y="1107.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1136.0" y="1118.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (1 samples, 0.04%)</title><rect x="1133.0" y="1091.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1136.0" y="1102.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.04%)</title><rect x="1133.0" y="1075.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1136.0" y="1086.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.04%)</title><rect x="1133.0" y="1059.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1136.0" y="1070.0"></text>
</g>
<g>
<title>DIR_Chunk::DIR_Chunk(int, int, DebugInformationRecorder*) (1 samples, 0.04%)</title><rect x="1133.0" y="1043.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1136.0" y="1054.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 0.17%)</title><rect x="1133.5" y="1123.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1136.5" y="1134.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 0.17%)</title><rect x="1133.5" y="1107.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1136.5" y="1118.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.08%)</title><rect x="1134.5" y="1091.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1137.5" y="1102.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.04%)</title><rect x="1134.5" y="1075.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1137.5" y="1086.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.04%)</title><rect x="1134.5" y="1059.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1137.5" y="1070.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.04%)</title><rect x="1134.5" y="1043.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1137.5" y="1054.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.04%)</title><rect x="1134.5" y="1027.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1137.5" y="1038.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.04%)</title><rect x="1134.5" y="1011.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1137.5" y="1022.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.04%)</title><rect x="1134.5" y="995.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1137.5" y="1006.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.04%)</title><rect x="1134.5" y="979.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1137.5" y="990.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.04%)</title><rect x="1135.0" y="1075.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1138.0" y="1086.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.04%)</title><rect x="1135.0" y="1059.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1138.0" y="1070.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (1 samples, 0.04%)</title><rect x="1135.0" y="1043.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1138.0" y="1054.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.04%)</title><rect x="1135.0" y="1027.0" width="0.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1138.0" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.08%)</title><rect x="1135.5" y="1123.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1138.5" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.08%)</title><rect x="1135.5" y="1107.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1138.5" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.08%)</title><rect x="1135.5" y="1091.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1138.5" y="1102.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.04%)</title><rect x="1135.5" y="1075.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1138.5" y="1086.0"></text>
</g>
<g>
<title>Node_List::push(Node*) (1 samples, 0.04%)</title><rect x="1135.5" y="1059.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1138.5" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.04%)</title><rect x="1136.0" y="1075.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1139.0" y="1086.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.04%)</title><rect x="1136.0" y="1059.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1139.0" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (16 samples, 0.68%)</title><rect x="1136.5" y="1123.0" width="8.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1139.5" y="1134.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.04%)</title><rect x="1136.5" y="1107.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1139.5" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.08%)</title><rect x="1137.0" y="1107.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1140.0" y="1118.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.04%)</title><rect x="1137.0" y="1091.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1140.0" y="1102.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.04%)</title><rect x="1137.5" y="1091.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1140.5" y="1102.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.04%)</title><rect x="1137.5" y="1075.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1140.5" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (2 samples, 0.08%)</title><rect x="1138.0" y="1107.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1141.0" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (3 samples, 0.13%)</title><rect x="1139.0" y="1107.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1142.0" y="1118.0"></text>
</g>
<g>
<title>IndexSet::alloc_block() (1 samples, 0.04%)</title><rect x="1139.5" y="1091.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1142.5" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.04%)</title><rect x="1140.0" y="1091.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1143.0" y="1102.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (1 samples, 0.04%)</title><rect x="1140.0" y="1075.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1143.0" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.04%)</title><rect x="1140.5" y="1107.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1143.5" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.04%)</title><rect x="1140.5" y="1091.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1143.5" y="1102.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.04%)</title><rect x="1140.5" y="1075.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1143.5" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::fixup_spills() (1 samples, 0.04%)</title><rect x="1141.0" y="1107.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1144.0" y="1118.0"></text>
</g>
<g>
<title>LiveRangeMap::find_const(Node const*) const (1 samples, 0.04%)</title><rect x="1141.0" y="1091.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1144.0" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.08%)</title><rect x="1141.5" y="1107.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1144.5" y="1118.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.04%)</title><rect x="1141.5" y="1091.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1144.5" y="1102.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (1 samples, 0.04%)</title><rect x="1142.0" y="1091.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1145.0" y="1102.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.04%)</title><rect x="1142.0" y="1075.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1145.0" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.04%)</title><rect x="1142.5" y="1107.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1145.5" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.04%)</title><rect x="1143.0" y="1107.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1146.0" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.04%)</title><rect x="1143.0" y="1091.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1146.0" y="1102.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.04%)</title><rect x="1143.5" y="1107.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1146.5" y="1118.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.04%)</title><rect x="1143.5" y="1091.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1146.5" y="1102.0"></text>
</g>
<g>
<title>TypeNode::ideal_reg() const (1 samples, 0.04%)</title><rect x="1144.0" y="1107.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1147.0" y="1118.0"></text>
</g>
<g>
<title>Compile::Optimize() (28 samples, 1.19%)</title><rect x="1144.5" y="1139.0" width="14.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1147.5" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (3 samples, 0.13%)</title><rect x="1144.5" y="1123.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1147.5" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (3 samples, 0.13%)</title><rect x="1144.5" y="1107.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1147.5" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (2 samples, 0.08%)</title><rect x="1145.0" y="1091.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1148.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_non_escaped_objects(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;) (2 samples, 0.08%)</title><rect x="1145.0" y="1075.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1148.0" y="1086.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.04%)</title><rect x="1146.0" y="1123.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1149.0" y="1134.0"></text>
</g>
<g>
<title>PhaseCCP::saturate(Type const*, Type const*, Type const*) const (1 samples, 0.04%)</title><rect x="1146.0" y="1107.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1149.0" y="1118.0"></text>
</g>
<g>
<title>TypeInt::widen(Type const*, Type const*) const (1 samples, 0.04%)</title><rect x="1146.0" y="1091.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1149.0" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (22 samples, 0.93%)</title><rect x="1146.5" y="1123.0" width="11.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1149.5" y="1134.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.04%)</title><rect x="1146.5" y="1107.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1149.5" y="1118.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.04%)</title><rect x="1146.5" y="1091.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1149.5" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.04%)</title><rect x="1146.5" y="1075.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1149.5" y="1086.0"></text>
</g>
<g>
<title>Invariance::is_invariant(Node*) (1 samples, 0.04%)</title><rect x="1146.5" y="1059.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1149.5" y="1070.0"></text>
</g>
<g>
<title>Invariance::compute_invariance(Node*) (1 samples, 0.04%)</title><rect x="1146.5" y="1043.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1149.5" y="1054.0"></text>
</g>
<g>
<title>Invariance::visit(Node*, Node*) (1 samples, 0.04%)</title><rect x="1146.5" y="1027.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1149.5" y="1038.0"></text>
</g>
<g>
<title>IdealLoopTree::is_invariant(Node*) const (1 samples, 0.04%)</title><rect x="1146.5" y="1011.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1149.5" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.04%)</title><rect x="1147.0" y="1107.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1150.0" y="1118.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="1147.0" y="1091.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1150.0" y="1102.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.04%)</title><rect x="1147.0" y="1075.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1150.0" y="1086.0"></text>
</g>
<g>
<title>os::malloc(unsigned long, MemoryType, NativeCallStack const&amp;) (1 samples, 0.04%)</title><rect x="1147.0" y="1059.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1150.0" y="1070.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.04%)</title><rect x="1147.0" y="1043.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1150.0" y="1054.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.04%)</title><rect x="1147.0" y="1027.0" width="0.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1150.0" y="1038.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.04%)</title><rect x="1147.0" y="1011.0" width="0.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1150.0" y="1022.0"></text>
</g>
<g>
<title>large_malloc (1 samples, 0.04%)</title><rect x="1147.0" y="995.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1150.0" y="1006.0"></text>
</g>
<g>
<title>__ulock_wait (1 samples, 0.04%)</title><rect x="1147.0" y="979.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1150.0" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (5 samples, 0.21%)</title><rect x="1147.5" y="1107.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1150.5" y="1118.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.04%)</title><rect x="1148.5" y="1091.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1151.5" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (2 samples, 0.08%)</title><rect x="1149.0" y="1091.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1152.0" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.04%)</title><rect x="1149.0" y="1075.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1152.0" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.04%)</title><rect x="1149.5" y="1075.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1152.5" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (9 samples, 0.38%)</title><rect x="1150.0" y="1107.0" width="4.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1153.0" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (8 samples, 0.34%)</title><rect x="1150.5" y="1091.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1153.5" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (6 samples, 0.25%)</title><rect x="1151.0" y="1075.0" width="3.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1154.0" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (1 samples, 0.04%)</title><rect x="1151.5" y="1059.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1154.5" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.04%)</title><rect x="1151.5" y="1043.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1154.5" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (4 samples, 0.17%)</title><rect x="1152.0" y="1059.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1155.0" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.04%)</title><rect x="1152.5" y="1043.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1155.5" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(Node*) const (2 samples, 0.08%)</title><rect x="1153.0" y="1043.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1156.0" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(Node*) const (1 samples, 0.04%)</title><rect x="1154.0" y="1075.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1157.0" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (3 samples, 0.13%)</title><rect x="1154.5" y="1107.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1157.5" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.04%)</title><rect x="1155.5" y="1091.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.5" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::sort(IdealLoopTree*, IdealLoopTree*) (1 samples, 0.04%)</title><rect x="1155.5" y="1075.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1158.5" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.08%)</title><rect x="1156.0" y="1107.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.0" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.08%)</title><rect x="1156.0" y="1091.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.0" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca(Node*, Node*) const (1 samples, 0.04%)</title><rect x="1156.0" y="1075.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.0" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_internal(Node*, Node*) const (1 samples, 0.04%)</title><rect x="1156.0" y="1059.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1159.0" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.04%)</title><rect x="1156.5" y="1075.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.5" y="1086.0"></text>
</g>
<g>
<title>IdealLoopTree::is_member(IdealLoopTree const*) const (1 samples, 0.04%)</title><rect x="1156.5" y="1059.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.5" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.04%)</title><rect x="1157.0" y="1107.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1160.0" y="1118.0"></text>
</g>
<g>
<title>Unique_Node_List::pop() (1 samples, 0.04%)</title><rect x="1157.0" y="1091.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1160.0" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (2 samples, 0.08%)</title><rect x="1157.5" y="1123.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1160.5" y="1134.0"></text>
</g>
<g>
<title>LoadNNode::Opcode() const (1 samples, 0.04%)</title><rect x="1158.0" y="1107.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.0" y="1118.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.25%)</title><rect x="1158.5" y="1139.0" width="3.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1161.5" y="1150.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.25%)</title><rect x="1158.5" y="1123.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.5" y="1134.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.25%)</title><rect x="1158.5" y="1107.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1161.5" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.25%)</title><rect x="1158.5" y="1091.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1161.5" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.25%)</title><rect x="1158.5" y="1075.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.5" y="1086.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.25%)</title><rect x="1158.5" y="1059.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.5" y="1070.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.08%)</title><rect x="1158.5" y="1043.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1161.5" y="1054.0"></text>
</g>
<g>
<title>Compile::should_delay_boxing_inlining(ciMethod*, JVMState*) (1 samples, 0.04%)</title><rect x="1158.5" y="1027.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.5" y="1038.0"></text>
</g>
<g>
<title>ciMethod::is_boxing_method() const (1 samples, 0.04%)</title><rect x="1158.5" y="1011.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.5" y="1022.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.04%)</title><rect x="1159.0" y="1027.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.0" y="1038.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.04%)</title><rect x="1159.0" y="1011.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.0" y="1022.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.04%)</title><rect x="1159.0" y="995.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.0" y="1006.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.04%)</title><rect x="1159.0" y="979.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1162.0" y="990.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.04%)</title><rect x="1159.0" y="963.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1162.0" y="974.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.04%)</title><rect x="1159.0" y="947.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1162.0" y="958.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.04%)</title><rect x="1159.0" y="931.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1162.0" y="942.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.04%)</title><rect x="1159.0" y="915.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1162.0" y="926.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.04%)</title><rect x="1159.0" y="899.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.0" y="910.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.04%)</title><rect x="1159.0" y="883.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.0" y="894.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.04%)</title><rect x="1159.0" y="867.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1162.0" y="878.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.04%)</title><rect x="1159.0" y="851.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.0" y="862.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.04%)</title><rect x="1159.0" y="835.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1162.0" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.13%)</title><rect x="1159.5" y="1043.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1162.5" y="1054.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.13%)</title><rect x="1159.5" y="1027.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.5" y="1038.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.13%)</title><rect x="1159.5" y="1011.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.5" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.13%)</title><rect x="1159.5" y="995.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1162.5" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.13%)</title><rect x="1159.5" y="979.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1162.5" y="990.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.13%)</title><rect x="1159.5" y="963.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1162.5" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.08%)</title><rect x="1159.5" y="947.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.5" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.08%)</title><rect x="1159.5" y="931.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1162.5" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.08%)</title><rect x="1159.5" y="915.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.5" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.08%)</title><rect x="1159.5" y="899.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1162.5" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.08%)</title><rect x="1159.5" y="883.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1162.5" y="894.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (2 samples, 0.08%)</title><rect x="1159.5" y="867.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1162.5" y="878.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.04%)</title><rect x="1159.5" y="851.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.5" y="862.0"></text>
</g>
<g>
<title>Compile::too_many_recompiles(ciMethod*, int, Deoptimization::DeoptReason) (1 samples, 0.04%)</title><rect x="1159.5" y="835.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1162.5" y="846.0"></text>
</g>
<g>
<title>ProjNode::Value(PhaseTransform*) const (1 samples, 0.04%)</title><rect x="1160.0" y="851.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.0" y="862.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1160.5" y="947.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1163.5" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1160.5" y="931.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.5" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1160.5" y="915.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.5" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1160.5" y="899.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.5" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1160.5" y="883.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.5" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1160.5" y="867.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.5" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1160.5" y="851.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.5" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1160.5" y="835.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1163.5" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1160.5" y="819.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1163.5" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1160.5" y="803.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1163.5" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1160.5" y="787.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.5" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1160.5" y="771.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1163.5" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1160.5" y="755.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1163.5" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1160.5" y="739.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1163.5" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1160.5" y="723.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.5" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1160.5" y="707.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1163.5" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1160.5" y="691.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1163.5" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1160.5" y="675.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1163.5" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1160.5" y="659.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1163.5" y="670.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.04%)</title><rect x="1160.5" y="643.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.5" y="654.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.04%)</title><rect x="1160.5" y="627.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.5" y="638.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.04%)</title><rect x="1160.5" y="611.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1163.5" y="622.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.04%)</title><rect x="1160.5" y="595.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1163.5" y="606.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.04%)</title><rect x="1160.5" y="579.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1163.5" y="590.0"></text>
</g>
<g>
<title>ciObjectFactory::find(Metadata*, GrowableArray&lt;ciMetadata*&gt;*) (1 samples, 0.04%)</title><rect x="1160.5" y="563.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.5" y="574.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1161.0" y="1043.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.0" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1161.0" y="1027.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.0" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1161.0" y="1011.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.0" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1161.0" y="995.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.0" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1161.0" y="979.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.0" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1161.0" y="963.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.0" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1161.0" y="947.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.0" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1161.0" y="931.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1164.0" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1161.0" y="915.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1164.0" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1161.0" y="899.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.0" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1161.0" y="883.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.0" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1161.0" y="867.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1164.0" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1161.0" y="851.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.0" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1161.0" y="835.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1164.0" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1161.0" y="819.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1164.0" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1161.0" y="803.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.0" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1161.0" y="787.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.0" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1161.0" y="771.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.0" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1161.0" y="755.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.0" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1161.0" y="739.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1164.0" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1161.0" y="723.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.0" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1161.0" y="707.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1161.0" y="691.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1161.0" y="675.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1164.0" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1161.0" y="659.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.0" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1161.0" y="643.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.0" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1161.0" y="627.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1164.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1161.0" y="611.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1161.0" y="595.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1161.0" y="579.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1161.0" y="563.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.0" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1161.0" y="547.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1164.0" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1161.0" y="531.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1161.0" y="515.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1161.0" y="499.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1161.0" y="483.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1161.0" y="467.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1164.0" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1161.0" y="451.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.0" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1161.0" y="435.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1161.0" y="419.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1161.0" y="403.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1161.0" y="387.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1161.0" y="371.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1164.0" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1161.0" y="355.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1164.0" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1161.0" y="339.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1161.0" y="323.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1161.0" y="307.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1164.0" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1161.0" y="291.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.0" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1161.0" y="275.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.0" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1161.0" y="259.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.0" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1161.0" y="243.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.0" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1161.0" y="227.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.0" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1161.0" y="211.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.0" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1161.0" y="195.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.0" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1161.0" y="179.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.0" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1161.0" y="163.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1164.0" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1161.0" y="147.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.0" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1161.0" y="131.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.0" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1161.0" y="115.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.0" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1161.0" y="99.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1164.0" y="110.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1161.0" y="83.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.0" y="94.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.04%)</title><rect x="1161.0" y="67.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.0" y="78.0"></text>
</g>
<g>
<title>InlineTree::find_subtree_from_root(InlineTree*, JVMState*, ciMethod*) (1 samples, 0.04%)</title><rect x="1161.0" y="51.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.0" y="62.0"></text>
</g>
<g>
<title>InlineTree::callee_at(int, ciMethod*) const (1 samples, 0.04%)</title><rect x="1161.0" y="35.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.0" y="46.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (14 samples, 0.59%)</title><rect x="1161.5" y="1171.0" width="7.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.5" y="1182.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (14 samples, 0.59%)</title><rect x="1161.5" y="1155.0" width="7.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.5" y="1166.0"></text>
</g>
<g>
<title>Compilation::compile_method() (14 samples, 0.59%)</title><rect x="1161.5" y="1139.0" width="7.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.5" y="1150.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (13 samples, 0.55%)</title><rect x="1161.5" y="1123.0" width="6.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.5" y="1134.0"></text>
</g>
<g>
<title>Compilation::build_hir() (8 samples, 0.34%)</title><rect x="1161.5" y="1107.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1164.5" y="1118.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (7 samples, 0.30%)</title><rect x="1161.5" y="1091.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.5" y="1102.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (7 samples, 0.30%)</title><rect x="1161.5" y="1075.0" width="3.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.5" y="1086.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (7 samples, 0.30%)</title><rect x="1161.5" y="1059.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.5" y="1070.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (6 samples, 0.25%)</title><rect x="1161.5" y="1043.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.5" y="1054.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (6 samples, 0.25%)</title><rect x="1161.5" y="1027.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.5" y="1038.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.04%)</title><rect x="1161.5" y="1011.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.5" y="1022.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.04%)</title><rect x="1161.5" y="995.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.5" y="1006.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.04%)</title><rect x="1161.5" y="979.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.5" y="990.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.04%)</title><rect x="1161.5" y="963.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.5" y="974.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.04%)</title><rect x="1161.5" y="947.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.5" y="958.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.04%)</title><rect x="1161.5" y="931.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.5" y="942.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.04%)</title><rect x="1161.5" y="915.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1164.5" y="926.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.04%)</title><rect x="1161.5" y="899.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1164.5" y="910.0"></text>
</g>
<g>
<title>SymbolTable::lookup(char const*, int, Thread*) (1 samples, 0.04%)</title><rect x="1161.5" y="883.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.5" y="894.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.04%)</title><rect x="1161.5" y="867.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.5" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (5 samples, 0.21%)</title><rect x="1162.0" y="1011.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.0" y="1022.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (4 samples, 0.17%)</title><rect x="1162.0" y="995.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1165.0" y="1006.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (4 samples, 0.17%)</title><rect x="1162.0" y="979.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.0" y="990.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (4 samples, 0.17%)</title><rect x="1162.0" y="963.0" width="2.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1165.0" y="974.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (4 samples, 0.17%)</title><rect x="1162.0" y="947.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.0" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.04%)</title><rect x="1162.0" y="931.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.0" y="942.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.04%)</title><rect x="1162.0" y="915.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.0" y="926.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.04%)</title><rect x="1162.0" y="899.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.0" y="910.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.04%)</title><rect x="1162.0" y="883.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.0" y="894.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.04%)</title><rect x="1162.0" y="867.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.0" y="878.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.04%)</title><rect x="1162.0" y="851.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.0" y="862.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.04%)</title><rect x="1162.0" y="835.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.0" y="846.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.04%)</title><rect x="1162.0" y="819.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.0" y="830.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.04%)</title><rect x="1162.0" y="803.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.0" y="814.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.04%)</title><rect x="1162.0" y="787.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1165.0" y="798.0"></text>
</g>
<g>
<title>Monitor::TryFast() (1 samples, 0.04%)</title><rect x="1162.0" y="771.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.0" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.08%)</title><rect x="1162.5" y="931.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.5" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.04%)</title><rect x="1162.5" y="915.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.5" y="926.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.04%)</title><rect x="1162.5" y="899.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.5" y="910.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.04%)</title><rect x="1162.5" y="883.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.5" y="894.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.04%)</title><rect x="1162.5" y="867.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.5" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.04%)</title><rect x="1162.5" y="851.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1165.5" y="862.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.04%)</title><rect x="1162.5" y="835.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.5" y="846.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.04%)</title><rect x="1162.5" y="819.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.5" y="830.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.04%)</title><rect x="1162.5" y="803.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.5" y="814.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.04%)</title><rect x="1162.5" y="787.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1165.5" y="798.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.04%)</title><rect x="1162.5" y="771.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.5" y="782.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.04%)</title><rect x="1162.5" y="755.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.5" y="766.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.04%)</title><rect x="1162.5" y="739.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.5" y="750.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.04%)</title><rect x="1162.5" y="723.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1165.5" y="734.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (1 samples, 0.04%)</title><rect x="1162.5" y="707.0" width="0.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1165.5" y="718.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.04%)</title><rect x="1162.5" y="691.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.5" y="702.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.04%)</title><rect x="1162.5" y="675.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1165.5" y="686.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.04%)</title><rect x="1163.0" y="915.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.0" y="926.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.04%)</title><rect x="1163.0" y="899.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.0" y="910.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.04%)</title><rect x="1163.0" y="883.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.0" y="894.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.04%)</title><rect x="1163.0" y="867.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.0" y="878.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.04%)</title><rect x="1163.0" y="851.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.0" y="862.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.04%)</title><rect x="1163.0" y="835.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.0" y="846.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.04%)</title><rect x="1163.0" y="819.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.0" y="830.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.04%)</title><rect x="1163.0" y="803.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.0" y="814.0"></text>
</g>
<g>
<title>ttyLocker::release_tty_if_locked() (1 samples, 0.04%)</title><rect x="1163.0" y="787.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.0" y="798.0"></text>
</g>
<g>
<title>pthread_self (1 samples, 0.04%)</title><rect x="1163.0" y="771.0" width="0.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1166.0" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::method_return(Instruction*) (1 samples, 0.04%)</title><rect x="1163.5" y="931.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.5" y="942.0"></text>
</g>
<g>
<title>Compilation::profile_return() (1 samples, 0.04%)</title><rect x="1163.5" y="915.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.5" y="926.0"></text>
</g>
<g>
<title>MethodData::profile_return() (1 samples, 0.04%)</title><rect x="1163.5" y="899.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.5" y="910.0"></text>
</g>
<g>
<title>Instruction::exact_type() const (1 samples, 0.04%)</title><rect x="1164.0" y="995.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.0" y="1006.0"></text>
</g>
<g>
<title>Invoke::declared_type() const (1 samples, 0.04%)</title><rect x="1164.0" y="979.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.0" y="990.0"></text>
</g>
<g>
<title>ciMethod::get_method_at_bci(int, bool&amp;, ciSignature**) (1 samples, 0.04%)</title><rect x="1164.0" y="963.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1167.0" y="974.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.04%)</title><rect x="1164.0" y="947.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.0" y="958.0"></text>
</g>
<g>
<title>ciBytecodeStream::has_method_type() (1 samples, 0.04%)</title><rect x="1164.0" y="931.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.0" y="942.0"></text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::append(Metadata* const&amp;) (1 samples, 0.04%)</title><rect x="1164.0" y="915.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.0" y="926.0"></text>
</g>
<g>
<title>GraphBuilder::setup_start_block(int, BlockBegin*, BlockBegin*, ValueStack*) (1 samples, 0.04%)</title><rect x="1164.5" y="1043.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1167.5" y="1054.0"></text>
</g>
<g>
<title>GraphBuilder::header_block(BlockBegin*, BlockBegin::Flag, ValueStack*) (1 samples, 0.04%)</title><rect x="1164.5" y="1027.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.5" y="1038.0"></text>
</g>
<g>
<title>Goto::Goto(BlockBegin*, bool) (1 samples, 0.04%)</title><rect x="1164.5" y="1011.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1167.5" y="1022.0"></text>
</g>
<g>
<title>IR::split_critical_edges() (1 samples, 0.04%)</title><rect x="1165.0" y="1091.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.0" y="1102.0"></text>
</g>
<g>
<title>CriticalEdgeFinder::split_edges() (1 samples, 0.04%)</title><rect x="1165.0" y="1075.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.0" y="1086.0"></text>
</g>
<g>
<title>BlockBegin::insert_block_between(BlockBegin*) (1 samples, 0.04%)</title><rect x="1165.0" y="1059.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1168.0" y="1070.0"></text>
</g>
<g>
<title>BlockBegin::BlockBegin(int) (1 samples, 0.04%)</title><rect x="1165.0" y="1043.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1168.0" y="1054.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (2 samples, 0.08%)</title><rect x="1165.5" y="1107.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1168.5" y="1118.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (2 samples, 0.08%)</title><rect x="1165.5" y="1091.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.5" y="1102.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_lir_list(LIR_List*) (2 samples, 0.08%)</title><rect x="1165.5" y="1075.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1168.5" y="1086.0"></text>
</g>
<g>
<title>LIR_Assembler::process_debug_info(LIR_Op*) (1 samples, 0.04%)</title><rect x="1165.5" y="1059.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.5" y="1070.0"></text>
</g>
<g>
<title>LIR_Assembler::record_non_safepoint_debug_info() (1 samples, 0.04%)</title><rect x="1165.5" y="1043.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1168.5" y="1054.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.04%)</title><rect x="1165.5" y="1027.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1168.5" y="1038.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.04%)</title><rect x="1165.5" y="1011.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.5" y="1022.0"></text>
</g>
<g>
<title>DIR_Chunk::DIR_Chunk(int, int, DebugInformationRecorder*) (1 samples, 0.04%)</title><rect x="1165.5" y="995.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1168.5" y="1006.0"></text>
</g>
<g>
<title>LIR_Assembler::safepoint_poll(LIR_OprDesc*, CodeEmitInfo*) (1 samples, 0.04%)</title><rect x="1166.0" y="1059.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.0" y="1070.0"></text>
</g>
<g>
<title>MacroAssembler::testl(RegisterImpl*, AddressLiteral) (1 samples, 0.04%)</title><rect x="1166.0" y="1043.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1169.0" y="1054.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (3 samples, 0.13%)</title><rect x="1166.5" y="1107.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1169.5" y="1118.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (2 samples, 0.08%)</title><rect x="1166.5" y="1091.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.5" y="1102.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (2 samples, 0.08%)</title><rect x="1166.5" y="1075.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1169.5" y="1086.0"></text>
</g>
<g>
<title>LIRGenerator::do_root(Instruction*) (2 samples, 0.08%)</title><rect x="1166.5" y="1059.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1169.5" y="1070.0"></text>
</g>
<g>
<title>LIRGenerator::do_Goto(Goto*) (1 samples, 0.04%)</title><rect x="1166.5" y="1043.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.5" y="1054.0"></text>
</g>
<g>
<title>LIRGenerator::move_to_phi(ValueStack*) (1 samples, 0.04%)</title><rect x="1166.5" y="1027.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1169.5" y="1038.0"></text>
</g>
<g>
<title>PhiResolverState::reset(int) (1 samples, 0.04%)</title><rect x="1166.5" y="1011.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1169.5" y="1022.0"></text>
</g>
<g>
<title>NodeList::grow(int, ResolveNode*) (1 samples, 0.04%)</title><rect x="1166.5" y="995.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.5" y="1006.0"></text>
</g>
<g>
<title>LIRGenerator::do_Invoke(Invoke*) (1 samples, 0.04%)</title><rect x="1167.0" y="1043.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1170.0" y="1054.0"></text>
</g>
<g>
<title>LIRGenerator::state_for(Instruction*, ValueStack*, bool) (1 samples, 0.04%)</title><rect x="1167.0" y="1027.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.0" y="1038.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.04%)</title><rect x="1167.5" y="1091.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.5" y="1102.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.04%)</title><rect x="1167.5" y="1075.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.5" y="1086.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.04%)</title><rect x="1167.5" y="1059.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1170.5" y="1070.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (1 samples, 0.04%)</title><rect x="1167.5" y="1043.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.5" y="1054.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_free_reg(Interval*) (1 samples, 0.04%)</title><rect x="1167.5" y="1027.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.5" y="1038.0"></text>
</g>
<g>
<title>LinearScanWalker::find_free_reg(int, int, int, int, bool*) (1 samples, 0.04%)</title><rect x="1167.5" y="1011.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.5" y="1022.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.04%)</title><rect x="1168.0" y="1123.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.0" y="1134.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.04%)</title><rect x="1168.0" y="1107.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.0" y="1118.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.04%)</title><rect x="1168.0" y="1091.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.0" y="1102.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.04%)</title><rect x="1168.0" y="1075.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.0" y="1086.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.04%)</title><rect x="1168.0" y="1059.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.0" y="1070.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.04%)</title><rect x="1168.0" y="1043.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.0" y="1054.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.04%)</title><rect x="1168.0" y="1027.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.0" y="1038.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (1 samples, 0.04%)</title><rect x="1168.0" y="1011.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1171.0" y="1022.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.04%)</title><rect x="1168.0" y="995.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1171.0" y="1006.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.04%)</title><rect x="1168.0" y="979.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1171.0" y="990.0"></text>
</g>
<g>
<title>CompileQueue::get() (9 samples, 0.38%)</title><rect x="1168.5" y="1187.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.5" y="1198.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (7 samples, 0.30%)</title><rect x="1168.5" y="1171.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.5" y="1182.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (5 samples, 0.21%)</title><rect x="1168.5" y="1155.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.5" y="1166.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (5 samples, 0.21%)</title><rect x="1168.5" y="1139.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.5" y="1150.0"></text>
</g>
<g>
<title>__psynch_cvwait (5 samples, 0.21%)</title><rect x="1168.5" y="1123.0" width="2.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1171.5" y="1134.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.08%)</title><rect x="1171.0" y="1155.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.0" y="1166.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (2 samples, 0.08%)</title><rect x="1171.0" y="1139.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.0" y="1150.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.08%)</title><rect x="1171.0" y="1123.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.0" y="1134.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.08%)</title><rect x="1171.0" y="1107.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.0" y="1118.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (2 samples, 0.08%)</title><rect x="1171.0" y="1091.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1174.0" y="1102.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (2 samples, 0.08%)</title><rect x="1171.0" y="1075.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.0" y="1086.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.08%)</title><rect x="1171.0" y="1059.0" width="1.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1174.0" y="1070.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (2 samples, 0.08%)</title><rect x="1172.0" y="1171.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.0" y="1182.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (2 samples, 0.08%)</title><rect x="1172.0" y="1155.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.0" y="1166.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (2 samples, 0.08%)</title><rect x="1172.0" y="1139.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.0" y="1150.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (2 samples, 0.08%)</title><rect x="1172.0" y="1123.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.0" y="1134.0"></text>
</g>
<g>
<title>RelocIterator::initialize(nmethod*, unsigned char*, unsigned char*) (1 samples, 0.04%)</title><rect x="1172.5" y="1107.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.5" y="1118.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (7 samples, 0.30%)</title><rect x="1173.0" y="1203.0" width="3.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.0" y="1214.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (2 samples, 0.08%)</title><rect x="1173.0" y="1187.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.0" y="1198.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (2 samples, 0.08%)</title><rect x="1173.0" y="1171.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.0" y="1182.0"></text>
</g>
<g>
<title>JvmtiCompiledMethodLoadEventMark::JvmtiCompiledMethodLoadEventMark(JavaThread*, nmethod*, void*) (1 samples, 0.04%)</title><rect x="1173.0" y="1155.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.0" y="1166.0"></text>
</g>
<g>
<title>JvmtiCodeBlobEvents::build_jvmti_addr_location_map(nmethod*, _jvmtiAddrLocationMap**, int*) (1 samples, 0.04%)</title><rect x="1173.0" y="1139.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.0" y="1150.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.04%)</title><rect x="1173.0" y="1123.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.0" y="1134.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.04%)</title><rect x="1173.0" y="1107.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.0" y="1118.0"></text>
</g>
<g>
<title>CompressedReadStream::read_int_mb(int) (1 samples, 0.04%)</title><rect x="1173.0" y="1091.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.0" y="1102.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.04%)</title><rect x="1173.5" y="1155.0" width="0.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1176.5" y="1166.0"></text>
</g>
<g>
<title>nmethod::scope_desc_at(unsigned char*) (1 samples, 0.04%)</title><rect x="1173.5" y="1139.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.5" y="1150.0"></text>
</g>
<g>
<title>ScopeDesc::decode_object_values(int) (1 samples, 0.04%)</title><rect x="1173.5" y="1123.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.5" y="1134.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (5 samples, 0.21%)</title><rect x="1174.0" y="1187.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.0" y="1198.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (5 samples, 0.21%)</title><rect x="1174.0" y="1171.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.0" y="1182.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (5 samples, 0.21%)</title><rect x="1174.0" y="1155.0" width="2.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1177.0" y="1166.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (5 samples, 0.21%)</title><rect x="1174.0" y="1139.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.0" y="1150.0"></text>
</g>
<g>
<title>__psynch_cvwait (5 samples, 0.21%)</title><rect x="1174.0" y="1123.0" width="2.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1177.0" y="1134.0"></text>
</g>
<g>
<title>VMThread::run() (9 samples, 0.38%)</title><rect x="1176.5" y="1235.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.5" y="1246.0"></text>
</g>
<g>
<title>VMThread::loop() (9 samples, 0.38%)</title><rect x="1176.5" y="1219.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.5" y="1230.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (3 samples, 0.13%)</title><rect x="1176.5" y="1203.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.5" y="1214.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (3 samples, 0.13%)</title><rect x="1176.5" y="1187.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.5" y="1198.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 0.13%)</title><rect x="1176.5" y="1171.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.5" y="1182.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.13%)</title><rect x="1176.5" y="1155.0" width="1.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1179.5" y="1166.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (5 samples, 0.21%)</title><rect x="1178.0" y="1203.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.0" y="1214.0"></text>
</g>
<g>
<title>os::NakedYield() (5 samples, 0.21%)</title><rect x="1178.0" y="1187.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.0" y="1198.0"></text>
</g>
<g>
<title>xdrrec_ops (5 samples, 0.21%)</title><rect x="1178.0" y="1171.0" width="2.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1181.0" y="1182.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.04%)</title><rect x="1180.5" y="1203.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.5" y="1214.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.04%)</title><rect x="1180.5" y="1187.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.5" y="1198.0"></text>
</g>
<g>
<title>VM_ParallelGCFailedAllocation::doit() (1 samples, 0.04%)</title><rect x="1180.5" y="1171.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.5" y="1182.0"></text>
</g>
<g>
<title>ParallelScavengeHeap::failed_mem_allocate(unsigned long) (1 samples, 0.04%)</title><rect x="1180.5" y="1155.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.5" y="1166.0"></text>
</g>
<g>
<title>PSScavenge::invoke() (1 samples, 0.04%)</title><rect x="1180.5" y="1139.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.5" y="1150.0"></text>
</g>
<g>
<title>PSScavenge::invoke_no_policy() (1 samples, 0.04%)</title><rect x="1180.5" y="1123.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.5" y="1134.0"></text>
</g>
<g>
<title>StringTable::unlink_or_oops_do(BoolObjectClosure*, OopClosure*, int*, int*) (1 samples, 0.04%)</title><rect x="1180.5" y="1107.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.5" y="1118.0"></text>
</g>
<g>
<title>StringTable::buckets_unlink_or_oops_do(BoolObjectClosure*, OopClosure*, int, int, BasicHashtable&lt;(MemoryType)9&gt;::BucketUnlinkContext*) (1 samples, 0.04%)</title><rect x="1180.5" y="1091.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.5" y="1102.0"></text>
</g>
<g>
<title>WatcherThread::run() (18 samples, 0.76%)</title><rect x="1181.0" y="1235.0" width="9.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.0" y="1246.0"></text>
</g>
<g>
<title>StatSamplerTask::task() (1 samples, 0.04%)</title><rect x="1181.0" y="1219.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.0" y="1230.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (17 samples, 0.72%)</title><rect x="1181.5" y="1219.0" width="8.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.5" y="1230.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (17 samples, 0.72%)</title><rect x="1181.5" y="1203.0" width="8.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.5" y="1214.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (17 samples, 0.72%)</title><rect x="1181.5" y="1187.0" width="8.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.5" y="1198.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (17 samples, 0.72%)</title><rect x="1181.5" y="1171.0" width="8.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.5" y="1182.0"></text>
</g>
<g>
<title>__psynch_cvwait (17 samples, 0.72%)</title><rect x="1181.5" y="1155.0" width="8.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1184.5" y="1166.0"></text>
</g>
</g>
</svg>
